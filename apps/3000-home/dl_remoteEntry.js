/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/.federation/entry.cb4847f4895a7e35e3f1005036da398f.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.federation/entry.cb4847f4895a7e35e3f1005036da398f.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Users_bytedance_dev_universe_packages_webpack_bundler_runtime_dist_index_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../packages/webpack-bundler-runtime/dist/index.esm.js */ \"../../packages/webpack-bundler-runtime/dist/index.esm.js\");\n/* harmony import */ var _Users_bytedance_dev_universe_packages_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../packages/node/dist/src/runtimePlugin.js?runtimePlugin */ \"../../packages/node/dist/src/runtimePlugin.js?runtimePlugin\");\n/* harmony import */ var _Users_bytedance_dev_universe_packages_nextjs_mf_dist_src_plugins_container_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../packages/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin */ \"../../packages/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin\");\n\n\n\n\nif(!__webpack_require__.federation.runtime){\n\tvar prevFederation = __webpack_require__.federation;\n\t__webpack_require__.federation = {}\n\tfor(var key in _Users_bytedance_dev_universe_packages_webpack_bundler_runtime_dist_index_esm_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]){\n\t\t__webpack_require__.federation[key] = _Users_bytedance_dev_universe_packages_webpack_bundler_runtime_dist_index_esm_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][key];\n\t}\n\tfor(var key in prevFederation){\n\t\t__webpack_require__.federation[key] = prevFederation[key];\n\t}\n}\nif(!__webpack_require__.federation.instance){\n\tconst pluginsToAdd = [\n\t\t_Users_bytedance_dev_universe_packages_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? (_Users_bytedance_dev_universe_packages_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"][\"default\"] || _Users_bytedance_dev_universe_packages_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"])() : false,\n\t\t_Users_bytedance_dev_universe_packages_nextjs_mf_dist_src_plugins_container_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"] ? (_Users_bytedance_dev_universe_packages_nextjs_mf_dist_src_plugins_container_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"default\"] || _Users_bytedance_dev_universe_packages_nextjs_mf_dist_src_plugins_container_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])() : false,\n\t].filter(Boolean);\n\t__webpack_require__.federation.initOptions.plugins = __webpack_require__.federation.initOptions.plugins ? \n\t__webpack_require__.federation.initOptions.plugins.concat(pluginsToAdd) : pluginsToAdd;\n\t__webpack_require__.federation.instance = __webpack_require__.federation.runtime.init(__webpack_require__.federation.initOptions);\n\tif(__webpack_require__.federation.attachShareScopeMap){\n\t\t__webpack_require__.federation.attachShareScopeMap(__webpack_require__)\n\t}\n\tif(__webpack_require__.federation.installInitialConsumes){\n\t\t__webpack_require__.federation.installInitialConsumes()\n\t}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLmZlZGVyYXRpb24vZW50cnkuY2I0ODQ3ZjQ4OTVhN2UzNWUzZjEwMDUwMzZkYTM5OGYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUEwRztBQUNDO0FBQ3VCOztBQUVsSSxJQUFJLG1CQUFtQjtBQUN2QixzQkFBc0IsbUJBQW1CO0FBQ3pDLENBQUMsbUJBQW1CO0FBQ3BCLGdCQUFnQix3SEFBVTtBQUMxQixFQUFFLG1CQUFtQixtQkFBbUIsd0hBQVU7QUFDbEQ7QUFDQTtBQUNBLEVBQUUsbUJBQW1CO0FBQ3JCO0FBQ0E7QUFDQSxJQUFJLG1CQUFtQjtBQUN2QjtBQUNBLEVBQUUsMkhBQVEsSUFBSSxzSUFBZ0IsSUFBSSwySEFBUTtBQUMxQyxFQUFFLGtKQUFRLElBQUksNkpBQWdCLElBQUksa0pBQVE7QUFDMUM7QUFDQSxDQUFDLG1CQUFtQixrQ0FBa0MsbUJBQW1CO0FBQ3pFLENBQUMsbUJBQW1CO0FBQ3BCLENBQUMsbUJBQW1CLHVCQUF1QixtQkFBbUIseUJBQXlCLG1CQUFtQjtBQUMxRyxJQUFJLG1CQUFtQjtBQUN2QixFQUFFLG1CQUFtQixnQ0FBZ0MsbUJBQW1CO0FBQ3hFO0FBQ0EsSUFBSSxtQkFBbUI7QUFDdkIsRUFBRSxtQkFBbUI7QUFDckI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4vbm9kZV9tb2R1bGVzLy5mZWRlcmF0aW9uL2VudHJ5LmNiNDg0N2Y0ODk1YTdlMzVlM2YxMDA1MDM2ZGEzOThmLmpzPzg3YjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZlZGVyYXRpb24gZnJvbSAnL1VzZXJzL2J5dGVkYW5jZS9kZXYvdW5pdmVyc2UvcGFja2FnZXMvd2VicGFjay1idW5kbGVyLXJ1bnRpbWUvZGlzdC9pbmRleC5lc20uanMnO1xuaW1wb3J0IHBsdWdpbl8wIGZyb20gJy9Vc2Vycy9ieXRlZGFuY2UvZGV2L3VuaXZlcnNlL3BhY2thZ2VzL25vZGUvZGlzdC9zcmMvcnVudGltZVBsdWdpbi5qcz9ydW50aW1lUGx1Z2luJztcbmltcG9ydCBwbHVnaW5fMSBmcm9tICcvVXNlcnMvYnl0ZWRhbmNlL2Rldi91bml2ZXJzZS9wYWNrYWdlcy9uZXh0anMtbWYvZGlzdC9zcmMvcGx1Z2lucy9jb250YWluZXIvcnVudGltZVBsdWdpbi5qcz9ydW50aW1lUGx1Z2luJztcblxuaWYoIV9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5ydW50aW1lKXtcblx0dmFyIHByZXZGZWRlcmF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24gPSB7fVxuXHRmb3IodmFyIGtleSBpbiBmZWRlcmF0aW9uKXtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb25ba2V5XSA9IGZlZGVyYXRpb25ba2V5XTtcblx0fVxuXHRmb3IodmFyIGtleSBpbiBwcmV2RmVkZXJhdGlvbil7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uW2tleV0gPSBwcmV2RmVkZXJhdGlvbltrZXldO1xuXHR9XG59XG5pZighX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluc3RhbmNlKXtcblx0Y29uc3QgcGx1Z2luc1RvQWRkID0gW1xuXHRcdHBsdWdpbl8wID8gKHBsdWdpbl8wLmRlZmF1bHQgfHwgcGx1Z2luXzApKCkgOiBmYWxzZSxcblx0XHRwbHVnaW5fMSA/IChwbHVnaW5fMS5kZWZhdWx0IHx8IHBsdWdpbl8xKSgpIDogZmFsc2UsXG5cdF0uZmlsdGVyKEJvb2xlYW4pO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uaW5pdE9wdGlvbnMucGx1Z2lucyA9IF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pbml0T3B0aW9ucy5wbHVnaW5zID8gXG5cdF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pbml0T3B0aW9ucy5wbHVnaW5zLmNvbmNhdChwbHVnaW5zVG9BZGQpIDogcGx1Z2luc1RvQWRkO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uaW5zdGFuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24ucnVudGltZS5pbml0KF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pbml0T3B0aW9ucyk7XG5cdGlmKF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5hdHRhY2hTaGFyZVNjb3BlTWFwKXtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uYXR0YWNoU2hhcmVTY29wZU1hcChfX3dlYnBhY2tfcmVxdWlyZV9fKVxuXHR9XG5cdGlmKF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pbnN0YWxsSW5pdGlhbENvbnN1bWVzKXtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uaW5zdGFsbEluaXRpYWxDb25zdW1lcygpXG5cdH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/.federation/entry.cb4847f4895a7e35e3f1005036da398f.js\n");

/***/ }),

/***/ "../../packages/runtime/dist/index.esm.js":
/*!************************************************!*\
  !*** ../../packages/runtime/dist/index.esm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FederationHost: () => (/* binding */ FederationHost),\n/* harmony export */   getInstance: () => (/* binding */ getInstance),\n/* harmony export */   getRemoteEntry: () => (/* binding */ getRemoteEntry),\n/* harmony export */   getRemoteInfo: () => (/* binding */ getRemoteInfo),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   loadRemote: () => (/* binding */ loadRemote),\n/* harmony export */   loadScript: () => (/* reexport safe */ _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScript),\n/* harmony export */   loadScriptNode: () => (/* reexport safe */ _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScriptNode),\n/* harmony export */   loadShare: () => (/* binding */ loadShare),\n/* harmony export */   loadShareSync: () => (/* binding */ loadShareSync),\n/* harmony export */   preloadRemote: () => (/* binding */ preloadRemote),\n/* harmony export */   registerGlobalPlugins: () => (/* reexport safe */ _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.H),\n/* harmony export */   registerPlugins: () => (/* binding */ registerPlugins),\n/* harmony export */   registerRemotes: () => (/* binding */ registerRemotes)\n/* harmony export */ });\n/* harmony import */ var _polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills.esm.js */ \"../../packages/runtime/dist/polyfills.esm.js\");\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @module-federation/sdk */ \"../../packages/sdk/dist/index.esm.js\");\n/* harmony import */ var _share_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./share.esm.js */ \"../../packages/runtime/dist/share.esm.js\");\n\n\n\n\n\n// Function to match a remote with its name and expose\n// id: pkgName(@federation/app1) + expose(button) = @federation/app1/button\n// id: alias(app1) + expose(button) = app1/button\n// id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort\nfunction matchRemoteWithNameAndExpose(remotes, id) {\n    for (const remote of remotes){\n        // match pkgName\n        const isNameMatched = id.startsWith(remote.name);\n        let expose = id.replace(remote.name, \"\");\n        if (isNameMatched) {\n            if (expose.startsWith(\"/\")) {\n                const pkgNameOrAlias = remote.name;\n                expose = `.${expose}`;\n                return {\n                    pkgNameOrAlias,\n                    expose,\n                    remote\n                };\n            } else if (expose === \"\") {\n                return {\n                    pkgNameOrAlias: remote.name,\n                    expose: \".\",\n                    remote\n                };\n            }\n        }\n        // match alias\n        const isAliasMatched = remote.alias && id.startsWith(remote.alias);\n        let exposeWithAlias = remote.alias && id.replace(remote.alias, \"\");\n        if (remote.alias && isAliasMatched) {\n            if (exposeWithAlias && exposeWithAlias.startsWith(\"/\")) {\n                const pkgNameOrAlias = remote.alias;\n                exposeWithAlias = `.${exposeWithAlias}`;\n                return {\n                    pkgNameOrAlias,\n                    expose: exposeWithAlias,\n                    remote\n                };\n            } else if (exposeWithAlias === \"\") {\n                return {\n                    pkgNameOrAlias: remote.alias,\n                    expose: \".\",\n                    remote\n                };\n            }\n        }\n    }\n    return;\n}\n// Function to match a remote with its name or alias\nfunction matchRemote(remotes, nameOrAlias) {\n    for (const remote of remotes){\n        const isNameMatched = nameOrAlias === remote.name;\n        if (isNameMatched) {\n            return remote;\n        }\n        const isAliasMatched = remote.alias && nameOrAlias === remote.alias;\n        if (isAliasMatched) {\n            return remote;\n        }\n    }\n    return;\n}\nfunction registerPlugins$1(plugins, hookInstances) {\n    const globalPlugins = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.g)();\n    // Incorporate global plugins\n    if (globalPlugins.length > 0) {\n        globalPlugins.forEach((plugin)=>{\n            if (plugins == null ? void 0 : plugins.find((item)=>item.name !== plugin.name)) {\n                plugins.push(plugin);\n            }\n        });\n    }\n    if (plugins && plugins.length > 0) {\n        plugins.forEach((plugin)=>{\n            hookInstances.forEach((hookInstance)=>{\n                hookInstance.applyPlugin(plugin);\n            });\n        });\n    }\n    return plugins;\n}\nasync function loadEsmEntry({ entry, remoteEntryExports }) {\n    return new Promise((resolve, reject)=>{\n        try {\n            if (!remoteEntryExports) {\n                // eslint-disable-next-line no-eval\n                new Function(\"callbacks\", `import(\"${entry}\").then(callbacks[0]).catch(callbacks[1])`)([\n                    resolve,\n                    reject\n                ]);\n            } else {\n                resolve(remoteEntryExports);\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\nasync function loadSystemJsEntry({ entry, remoteEntryExports }) {\n    return new Promise((resolve, reject)=>{\n        try {\n            if (!remoteEntryExports) {\n                // eslint-disable-next-line no-eval\n                new Function(\"callbacks\", `System.import(\"${entry}\").then(callbacks[0]).catch(callbacks[1])`)([\n                    resolve,\n                    reject\n                ]);\n            } else {\n                resolve(remoteEntryExports);\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\nasync function loadEntryScript({ name, globalName, entry, createScriptHook }) {\n    const { entryExports: remoteEntryExports } = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.c)(name, globalName);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScript)(entry, {\n        attrs: {},\n        createScriptHook: (url, attrs)=>{\n            const res = createScriptHook.emit({\n                url,\n                attrs\n            });\n            if (!res) return;\n            if (res instanceof HTMLScriptElement) {\n                return res;\n            }\n            if (\"script\" in res || \"timeout\" in res) {\n                return res;\n            }\n            return;\n        }\n    }).then(()=>{\n        const { remoteEntryKey, entryExports } = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.c)(name, globalName);\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(entryExports, `\n      Unable to use the ${name}'s '${entry}' URL with ${remoteEntryKey}'s globalName to get remoteEntry exports.\n      Possible reasons could be:\\n\n      1. '${entry}' is not the correct URL, or the remoteEntry resource or name is incorrect.\\n\n      2. ${remoteEntryKey} cannot be used to get remoteEntry exports in the window object.\n    `);\n        return entryExports;\n    }).catch((e)=>{\n        throw e;\n    });\n}\nasync function loadEntryDom({ remoteInfo, remoteEntryExports, createScriptHook }) {\n    const { entry, entryGlobalName: globalName, name, type } = remoteInfo;\n    switch(type){\n        case \"esm\":\n        case \"module\":\n            return loadEsmEntry({\n                entry,\n                remoteEntryExports\n            });\n        case \"system\":\n            return loadSystemJsEntry({\n                entry,\n                remoteEntryExports\n            });\n        default:\n            return loadEntryScript({\n                entry,\n                globalName,\n                name,\n                createScriptHook\n            });\n    }\n}\nasync function loadEntryNode({ remoteInfo, createScriptHook }) {\n    const { entry, entryGlobalName: globalName, name } = remoteInfo;\n    const { entryExports: remoteEntryExports } = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.c)(name, globalName);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScriptNode)(entry, {\n        attrs: {\n            name,\n            globalName\n        },\n        createScriptHook: (url, attrs)=>{\n            const res = createScriptHook.emit({\n                url,\n                attrs\n            });\n            if (!res) return;\n            if (\"url\" in res) {\n                return res;\n            }\n            return;\n        }\n    }).then(()=>{\n        const { remoteEntryKey, entryExports } = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.c)(name, globalName);\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(entryExports, `\n      Unable to use the ${name}'s '${entry}' URL with ${remoteEntryKey}'s globalName to get remoteEntry exports.\n      Possible reasons could be:\\n\n      1. '${entry}' is not the correct URL, or the remoteEntry resource or name is incorrect.\\n\n      2. ${remoteEntryKey} cannot be used to get remoteEntry exports in the window object.\n    `);\n        return entryExports;\n    }).catch((e)=>{\n        throw e;\n    });\n}\nfunction getRemoteEntryUniqueKey(remoteInfo) {\n    const { entry, name } = remoteInfo;\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.composeKeyWithSeparator)(name, entry);\n}\nasync function getRemoteEntry({ origin, remoteEntryExports, remoteInfo }) {\n    const uniqueKey = getRemoteEntryUniqueKey(remoteInfo);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    if (!_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.a[uniqueKey]) {\n        const loadEntryHook = origin.remoteHandler.hooks.lifecycle.loadEntry;\n        if (loadEntryHook.listeners.size) {\n            _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.a[uniqueKey] = loadEntryHook.emit({\n                createScriptHook: origin.loaderHook.lifecycle.createScript,\n                remoteInfo,\n                remoteEntryExports\n            }).then((res)=>res || undefined);\n        } else {\n            const createScriptHook = origin.loaderHook.lifecycle.createScript;\n            if (!(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)()) {\n                _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.a[uniqueKey] = loadEntryNode({\n                    remoteInfo,\n                    createScriptHook\n                });\n            } else {\n                _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.a[uniqueKey] = loadEntryDom({\n                    remoteInfo,\n                    remoteEntryExports,\n                    createScriptHook\n                });\n            }\n        }\n    }\n    return _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.a[uniqueKey];\n}\nfunction getRemoteInfo(remote) {\n    return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, remote, {\n        entry: \"entry\" in remote ? remote.entry : \"\",\n        type: remote.type || _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.D,\n        entryGlobalName: remote.entryGlobalName || remote.name,\n        shareScope: remote.shareScope || _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.b\n    });\n}\nlet Module = class Module {\n    async getEntry() {\n        if (this.remoteEntryExports) {\n            return this.remoteEntryExports;\n        }\n        // Get remoteEntry.js\n        const remoteEntryExports = await getRemoteEntry({\n            origin: this.host,\n            remoteInfo: this.remoteInfo,\n            remoteEntryExports: this.remoteEntryExports\n        });\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(remoteEntryExports, `remoteEntryExports is undefined \\n ${(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.safeToString)(this.remoteInfo)}`);\n        this.remoteEntryExports = remoteEntryExports;\n        return this.remoteEntryExports;\n    }\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    async get(id, expose, options) {\n        const { loadFactory = true } = options || {\n            loadFactory: true\n        };\n        // Get remoteEntry.js\n        const remoteEntryExports = await this.getEntry();\n        if (!this.inited) {\n            const localShareScopeMap = this.host.shareScopeMap;\n            const remoteShareScope = this.remoteInfo.shareScope || \"default\";\n            if (!localShareScopeMap[remoteShareScope]) {\n                localShareScopeMap[remoteShareScope] = {};\n            }\n            const shareScope = localShareScopeMap[remoteShareScope];\n            const initScope = [];\n            const remoteEntryInitOptions = {\n                version: this.remoteInfo.version || \"\"\n            };\n            // Help to find host instance\n            Object.defineProperty(remoteEntryInitOptions, \"shareScopeMap\", {\n                value: localShareScopeMap,\n                // remoteEntryInitOptions will be traversed and assigned during container init, ,so this attribute is not allowed to be traversed\n                enumerable: false\n            });\n            const initContainerOptions = await this.host.hooks.lifecycle.beforeInitContainer.emit({\n                shareScope,\n                // @ts-ignore shareScopeMap will be set by Object.defineProperty\n                remoteEntryInitOptions,\n                initScope,\n                remoteInfo: this.remoteInfo,\n                origin: this.host\n            });\n            if (typeof (remoteEntryExports == null ? void 0 : remoteEntryExports.init) === \"undefined\") {\n                console.error('The remote entry interface does not contain \"init\"', \"\\n\", \"Ensure the name of this remote is not reserved or in use. Check if anything already exists on window[nameOfRemote]\", \"\\n\", \"Ensure that window[nameOfRemote] is returning a {get,init} object.\");\n            }\n            await remoteEntryExports.init(initContainerOptions.shareScope, initContainerOptions.initScope, initContainerOptions.remoteEntryInitOptions);\n            await this.host.hooks.lifecycle.initContainer.emit((0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, initContainerOptions, {\n                remoteEntryExports\n            }));\n        }\n        this.lib = remoteEntryExports;\n        this.inited = true;\n        // get exposeGetter\n        const moduleFactory = await remoteEntryExports.get(expose);\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(moduleFactory, `${(0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.e)(this.remoteInfo)} remote don't export ${expose}.`);\n        const wrapModuleFactory = this.wraperFactory(moduleFactory, id);\n        if (!loadFactory) {\n            return wrapModuleFactory;\n        }\n        const exposeContent = await wrapModuleFactory();\n        return exposeContent;\n    }\n    wraperFactory(moduleFactory, id) {\n        function defineModuleId(res, id) {\n            if (res && typeof res === \"object\" && Object.isExtensible(res) && !Object.getOwnPropertyDescriptor(res, Symbol.for(\"mf_module_id\"))) {\n                Object.defineProperty(res, Symbol.for(\"mf_module_id\"), {\n                    value: id,\n                    enumerable: false\n                });\n            }\n        }\n        if (moduleFactory instanceof Promise) {\n            return async ()=>{\n                const res = await moduleFactory();\n                // This parameter is used for bridge debugging\n                defineModuleId(res, id);\n                return res;\n            };\n        } else {\n            return ()=>{\n                const res = moduleFactory();\n                // This parameter is used for bridge debugging\n                defineModuleId(res, id);\n                return res;\n            };\n        }\n    }\n    constructor({ remoteInfo, host }){\n        this.inited = false;\n        this.lib = undefined;\n        this.remoteInfo = remoteInfo;\n        this.host = host;\n    }\n};\nclass SyncHook {\n    on(fn) {\n        if (typeof fn === \"function\") {\n            this.listeners.add(fn);\n        }\n    }\n    once(fn) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.on(function wrapper(...args) {\n            self.remove(wrapper);\n            // eslint-disable-next-line prefer-spread\n            return fn.apply(null, args);\n        });\n    }\n    emit(...data) {\n        let result;\n        if (this.listeners.size > 0) {\n            // eslint-disable-next-line prefer-spread\n            this.listeners.forEach((fn)=>{\n                result = fn(...data);\n            });\n        }\n        return result;\n    }\n    remove(fn) {\n        this.listeners.delete(fn);\n    }\n    removeAll() {\n        this.listeners.clear();\n    }\n    constructor(type){\n        this.type = \"\";\n        this.listeners = new Set();\n        if (type) {\n            this.type = type;\n        }\n    }\n}\nclass AsyncHook extends SyncHook {\n    emit(...data) {\n        let result;\n        const ls = Array.from(this.listeners);\n        if (ls.length > 0) {\n            let i = 0;\n            const call = (prev)=>{\n                if (prev === false) {\n                    return false; // Abort process\n                } else if (i < ls.length) {\n                    return Promise.resolve(ls[i++].apply(null, data)).then(call);\n                } else {\n                    return prev;\n                }\n            };\n            result = call();\n        }\n        return Promise.resolve(result);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction checkReturnData(originalData, returnedData) {\n    if (!(0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.i)(returnedData)) {\n        return false;\n    }\n    if (originalData !== returnedData) {\n        // eslint-disable-next-line no-restricted-syntax\n        for(const key in originalData){\n            if (!(key in returnedData)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nclass SyncWaterfallHook extends SyncHook {\n    emit(data) {\n        if (!(0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.i)(data)) {\n            (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.f)(`The data for the \"${this.type}\" hook should be an object.`);\n        }\n        for (const fn of this.listeners){\n            try {\n                const tempData = fn(data);\n                if (checkReturnData(data, tempData)) {\n                    data = tempData;\n                } else {\n                    this.onerror(`A plugin returned an unacceptable value for the \"${this.type}\" type.`);\n                    break;\n                }\n            } catch (e) {\n                (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.w)(e);\n                this.onerror(e);\n            }\n        }\n        return data;\n    }\n    constructor(type){\n        super();\n        this.onerror = _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.f;\n        this.type = type;\n    }\n}\nclass AsyncWaterfallHook extends SyncHook {\n    emit(data) {\n        if (!(0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.i)(data)) {\n            (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.f)(`The response data for the \"${this.type}\" hook must be an object.`);\n        }\n        const ls = Array.from(this.listeners);\n        if (ls.length > 0) {\n            let i = 0;\n            const processError = (e)=>{\n                (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.w)(e);\n                this.onerror(e);\n                return data;\n            };\n            const call = (prevData)=>{\n                if (checkReturnData(data, prevData)) {\n                    data = prevData;\n                    if (i < ls.length) {\n                        try {\n                            return Promise.resolve(ls[i++](data)).then(call, processError);\n                        } catch (e) {\n                            return processError(e);\n                        }\n                    }\n                } else {\n                    this.onerror(`A plugin returned an incorrect value for the \"${this.type}\" type.`);\n                }\n                return data;\n            };\n            return Promise.resolve(call(data));\n        }\n        return Promise.resolve(data);\n    }\n    constructor(type){\n        super();\n        this.onerror = _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.f;\n        this.type = type;\n    }\n}\nclass PluginSystem {\n    applyPlugin(plugin) {\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)((0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.h)(plugin), \"Plugin configuration is invalid.\");\n        // The plugin's name is mandatory and must be unique\n        const pluginName = plugin.name;\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(pluginName, \"A name must be provided by the plugin.\");\n        if (!this.registerPlugins[pluginName]) {\n            this.registerPlugins[pluginName] = plugin;\n            Object.keys(this.lifecycle).forEach((key)=>{\n                const pluginLife = plugin[key];\n                if (pluginLife) {\n                    this.lifecycle[key].on(pluginLife);\n                }\n            });\n        }\n    }\n    removePlugin(pluginName) {\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(pluginName, \"A name is required.\");\n        const plugin = this.registerPlugins[pluginName];\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(plugin, `The plugin \"${pluginName}\" is not registered.`);\n        Object.keys(plugin).forEach((key)=>{\n            if (key !== \"name\") {\n                this.lifecycle[key].remove(plugin[key]);\n            }\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    inherit({ lifecycle, registerPlugins }) {\n        Object.keys(lifecycle).forEach((hookName)=>{\n            (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(!this.lifecycle[hookName], `The hook \"${hookName}\" has a conflict and cannot be inherited.`);\n            this.lifecycle[hookName] = lifecycle[hookName];\n        });\n        Object.keys(registerPlugins).forEach((pluginName)=>{\n            (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(!this.registerPlugins[pluginName], `The plugin \"${pluginName}\" has a conflict and cannot be inherited.`);\n            this.applyPlugin(registerPlugins[pluginName]);\n        });\n    }\n    constructor(lifecycle){\n        this.registerPlugins = {};\n        this.lifecycle = lifecycle;\n        this.lifecycleKeys = Object.keys(lifecycle);\n    }\n}\nfunction defaultPreloadArgs(preloadConfig) {\n    return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n        resourceCategory: \"sync\",\n        share: true,\n        depsRemote: true,\n        prefetchInterface: false\n    }, preloadConfig);\n}\nfunction formatPreloadArgs(remotes, preloadArgs) {\n    return preloadArgs.map((args)=>{\n        const remoteInfo = matchRemote(remotes, args.nameOrAlias);\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(remoteInfo, `Unable to preload ${args.nameOrAlias} as it is not included in ${!remoteInfo && (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.safeToString)({\n            remoteInfo,\n            remotes\n        })}`);\n        return {\n            remote: remoteInfo,\n            preloadConfig: defaultPreloadArgs(args)\n        };\n    });\n}\nfunction normalizePreloadExposes(exposes) {\n    if (!exposes) {\n        return [];\n    }\n    return exposes.map((expose)=>{\n        if (expose === \".\") {\n            return expose;\n        }\n        if (expose.startsWith(\"./\")) {\n            return expose.replace(\"./\", \"\");\n        }\n        return expose;\n    });\n}\nfunction preloadAssets(remoteInfo, host, assets, useLinkPreload = true) {\n    const { cssAssets, jsAssetsWithoutEntry, entryAssets } = assets;\n    if (host.options.inBrowser) {\n        entryAssets.forEach((asset)=>{\n            const { moduleInfo } = asset;\n            const module = host.moduleCache.get(remoteInfo.name);\n            if (module) {\n                getRemoteEntry({\n                    origin: host,\n                    remoteInfo: moduleInfo,\n                    remoteEntryExports: module.remoteEntryExports\n                });\n            } else {\n                getRemoteEntry({\n                    origin: host,\n                    remoteInfo: moduleInfo,\n                    remoteEntryExports: undefined\n                });\n            }\n        });\n        if (useLinkPreload) {\n            const defaultAttrs = {\n                rel: \"preload\",\n                as: \"style\",\n                crossorigin: \"anonymous\"\n            };\n            cssAssets.forEach((cssUrl)=>{\n                const { link: cssEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: cssUrl,\n                    cb: ()=>{},\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    }\n                });\n                needAttach && document.head.appendChild(cssEl);\n            });\n        } else {\n            const defaultAttrs = {\n                rel: \"stylesheet\",\n                type: \"text/css\"\n            };\n            cssAssets.forEach((cssUrl)=>{\n                const { link: cssEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: cssUrl,\n                    cb: ()=>{},\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    },\n                    needDeleteLink: false\n                });\n                needAttach && document.head.appendChild(cssEl);\n            });\n        }\n        if (useLinkPreload) {\n            const defaultAttrs = {\n                rel: \"preload\",\n                as: \"script\",\n                crossorigin: \"anonymous\"\n            };\n            jsAssetsWithoutEntry.forEach((jsUrl)=>{\n                const { link: linkEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: jsUrl,\n                    cb: ()=>{},\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    }\n                });\n                needAttach && document.head.appendChild(linkEl);\n            });\n        } else {\n            const defaultAttrs = {\n                fetchpriority: \"high\",\n                type: (remoteInfo == null ? void 0 : remoteInfo.type) === \"module\" ? \"module\" : \"text/javascript\"\n            };\n            jsAssetsWithoutEntry.forEach((jsUrl)=>{\n                const { script: scriptEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createScript)({\n                    url: jsUrl,\n                    cb: ()=>{},\n                    attrs: defaultAttrs,\n                    createScriptHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createScript.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLScriptElement) {\n                            return res;\n                        }\n                        return;\n                    },\n                    needDeleteScript: true\n                });\n                needAttach && document.head.appendChild(scriptEl);\n            });\n        }\n    }\n}\nfunction assignRemoteInfo(remoteInfo, remoteSnapshot) {\n    const remoteEntryInfo = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.l)(remoteSnapshot);\n    if (!remoteEntryInfo.url) {\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.f)(`The attribute remoteEntry of ${remoteInfo.name} must not be undefined.`);\n    }\n    let entryUrl = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(remoteSnapshot, remoteEntryInfo.url);\n    if (!(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() && !entryUrl.startsWith(\"http\")) {\n        entryUrl = `https:${entryUrl}`;\n    }\n    remoteInfo.type = remoteEntryInfo.type;\n    remoteInfo.entryGlobalName = remoteEntryInfo.globalName;\n    remoteInfo.entry = entryUrl;\n    remoteInfo.version = remoteSnapshot.version;\n    remoteInfo.buildVersion = remoteSnapshot.buildVersion;\n}\nfunction snapshotPlugin() {\n    return {\n        name: \"snapshot-plugin\",\n        async afterResolve (args) {\n            const { remote, pkgNameOrAlias, expose, origin, remoteInfo } = args;\n            if (!(0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.j)(remote) || !(0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.k)(remote)) {\n                const { remoteSnapshot, globalSnapshot } = await origin.snapshotHandler.loadRemoteSnapshotInfo(remote);\n                assignRemoteInfo(remoteInfo, remoteSnapshot);\n                // preloading assets\n                const preloadOptions = {\n                    remote,\n                    preloadConfig: {\n                        nameOrAlias: pkgNameOrAlias,\n                        exposes: [\n                            expose\n                        ],\n                        resourceCategory: \"sync\",\n                        share: false,\n                        depsRemote: false\n                    }\n                };\n                const assets = await origin.remoteHandler.hooks.lifecycle.generatePreloadAssets.emit({\n                    origin,\n                    preloadOptions,\n                    remoteInfo,\n                    remote,\n                    remoteSnapshot,\n                    globalSnapshot\n                });\n                if (assets) {\n                    preloadAssets(remoteInfo, origin, assets, false);\n                }\n                return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, args, {\n                    remoteSnapshot\n                });\n            }\n            return args;\n        }\n    };\n}\n// name\n// name:version\nfunction splitId(id) {\n    const splitInfo = id.split(\":\");\n    if (splitInfo.length === 1) {\n        return {\n            name: splitInfo[0],\n            version: undefined\n        };\n    } else if (splitInfo.length === 2) {\n        return {\n            name: splitInfo[0],\n            version: splitInfo[1]\n        };\n    } else {\n        return {\n            name: splitInfo[1],\n            version: splitInfo[2]\n        };\n    }\n}\n// Traverse all nodes in moduleInfo and traverse the entire snapshot\nfunction traverseModuleInfo(globalSnapshot, remoteInfo, traverse, isRoot, memo = {}, remoteSnapshot) {\n    const id = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.e)(remoteInfo);\n    const { value: snapshotValue } = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.m)(globalSnapshot, id);\n    const effectiveRemoteSnapshot = remoteSnapshot || snapshotValue;\n    if (effectiveRemoteSnapshot && !(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isManifestProvider)(effectiveRemoteSnapshot)) {\n        traverse(effectiveRemoteSnapshot, remoteInfo, isRoot);\n        if (effectiveRemoteSnapshot.remotesInfo) {\n            const remoteKeys = Object.keys(effectiveRemoteSnapshot.remotesInfo);\n            for (const key of remoteKeys){\n                if (memo[key]) {\n                    continue;\n                }\n                memo[key] = true;\n                const subRemoteInfo = splitId(key);\n                const remoteValue = effectiveRemoteSnapshot.remotesInfo[key];\n                traverseModuleInfo(globalSnapshot, {\n                    name: subRemoteInfo.name,\n                    version: remoteValue.matchedVersion\n                }, traverse, false, memo, undefined);\n            }\n        }\n    }\n}\n// eslint-disable-next-line max-lines-per-function\nfunction generatePreloadAssets(origin, preloadOptions, remote, globalSnapshot, remoteSnapshot) {\n    const cssAssets = [];\n    const jsAssets = [];\n    const entryAssets = [];\n    const loadedSharedJsAssets = new Set();\n    const loadedSharedCssAssets = new Set();\n    const { options } = origin;\n    const { preloadConfig: rootPreloadConfig } = preloadOptions;\n    const { depsRemote } = rootPreloadConfig;\n    const memo = {};\n    traverseModuleInfo(globalSnapshot, remote, (moduleInfoSnapshot, remoteInfo, isRoot)=>{\n        let preloadConfig;\n        if (isRoot) {\n            preloadConfig = rootPreloadConfig;\n        } else {\n            if (Array.isArray(depsRemote)) {\n                // eslint-disable-next-line array-callback-return\n                const findPreloadConfig = depsRemote.find((remoteConfig)=>{\n                    if (remoteConfig.nameOrAlias === remoteInfo.name || remoteConfig.nameOrAlias === remoteInfo.alias) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (!findPreloadConfig) {\n                    return;\n                }\n                preloadConfig = defaultPreloadArgs(findPreloadConfig);\n            } else if (depsRemote === true) {\n                preloadConfig = rootPreloadConfig;\n            } else {\n                return;\n            }\n        }\n        const remoteEntryUrl = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(moduleInfoSnapshot, (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.l)(moduleInfoSnapshot).url);\n        if (remoteEntryUrl) {\n            entryAssets.push({\n                name: remoteInfo.name,\n                moduleInfo: {\n                    name: remoteInfo.name,\n                    entry: remoteEntryUrl,\n                    type: \"remoteEntryType\" in moduleInfoSnapshot ? moduleInfoSnapshot.remoteEntryType : \"global\",\n                    entryGlobalName: \"globalName\" in moduleInfoSnapshot ? moduleInfoSnapshot.globalName : remoteInfo.name,\n                    shareScope: \"\",\n                    version: \"version\" in moduleInfoSnapshot ? moduleInfoSnapshot.version : undefined\n                },\n                url: remoteEntryUrl\n            });\n        }\n        let moduleAssetsInfo = \"modules\" in moduleInfoSnapshot ? moduleInfoSnapshot.modules : [];\n        const normalizedPreloadExposes = normalizePreloadExposes(preloadConfig.exposes);\n        if (normalizedPreloadExposes.length && \"modules\" in moduleInfoSnapshot) {\n            var _moduleInfoSnapshot_modules;\n            moduleAssetsInfo = moduleInfoSnapshot == null ? void 0 : (_moduleInfoSnapshot_modules = moduleInfoSnapshot.modules) == null ? void 0 : _moduleInfoSnapshot_modules.reduce((assets, moduleAssetInfo)=>{\n                if ((normalizedPreloadExposes == null ? void 0 : normalizedPreloadExposes.indexOf(moduleAssetInfo.moduleName)) !== -1) {\n                    assets.push(moduleAssetInfo);\n                }\n                return assets;\n            }, []);\n        }\n        function handleAssets(assets) {\n            const assetsRes = assets.map((asset)=>(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(moduleInfoSnapshot, asset));\n            if (preloadConfig.filter) {\n                return assetsRes.filter(preloadConfig.filter);\n            }\n            return assetsRes;\n        }\n        if (moduleAssetsInfo) {\n            const assetsLength = moduleAssetsInfo.length;\n            for(let index = 0; index < assetsLength; index++){\n                const assetsInfo = moduleAssetsInfo[index];\n                const exposeFullPath = `${remoteInfo.name}/${assetsInfo.moduleName}`;\n                origin.remoteHandler.hooks.lifecycle.handlePreloadModule.emit({\n                    id: assetsInfo.moduleName === \".\" ? remoteInfo.name : exposeFullPath,\n                    name: remoteInfo.name,\n                    remoteSnapshot: moduleInfoSnapshot,\n                    preloadConfig,\n                    remote: remoteInfo,\n                    origin\n                });\n                const preloaded = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.n)(exposeFullPath);\n                if (preloaded) {\n                    continue;\n                }\n                if (preloadConfig.resourceCategory === \"all\") {\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.async));\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.sync));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.async));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.sync));\n                // eslint-disable-next-line no-constant-condition\n                } else if (preloadConfig.resourceCategory = \"sync\") {\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.sync));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.sync));\n                }\n                (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.s)(exposeFullPath);\n            }\n        }\n    }, true, memo, remoteSnapshot);\n    if (remoteSnapshot.shared) {\n        const collectSharedAssets = (shareInfo, snapshotShared)=>{\n            const registeredShared = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(origin.shareScopeMap, snapshotShared.sharedName, shareInfo, origin.sharedHandler.hooks.lifecycle.resolveShare);\n            // If the global share does not exist, or the lib function does not exist, it means that the shared has not been loaded yet and can be preloaded.\n            if (registeredShared && typeof registeredShared.lib === \"function\") {\n                snapshotShared.assets.js.sync.forEach((asset)=>{\n                    loadedSharedJsAssets.add(asset);\n                });\n                snapshotShared.assets.css.sync.forEach((asset)=>{\n                    loadedSharedCssAssets.add(asset);\n                });\n            }\n        };\n        remoteSnapshot.shared.forEach((shared)=>{\n            var _options_shared;\n            const shareInfos = (_options_shared = options.shared) == null ? void 0 : _options_shared[shared.sharedName];\n            if (!shareInfos) {\n                return;\n            }\n            // if no version, preload all shared\n            const sharedOptions = shared.version ? shareInfos.find((s)=>s.version === shared.version) : shareInfos;\n            if (!sharedOptions) {\n                return;\n            }\n            const arrayShareInfo = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.p)(sharedOptions);\n            arrayShareInfo.forEach((s)=>{\n                collectSharedAssets(s, shared);\n            });\n        });\n    }\n    const needPreloadJsAssets = jsAssets.filter((asset)=>!loadedSharedJsAssets.has(asset));\n    const needPreloadCssAssets = cssAssets.filter((asset)=>!loadedSharedCssAssets.has(asset));\n    return {\n        cssAssets: needPreloadCssAssets,\n        jsAssetsWithoutEntry: needPreloadJsAssets,\n        entryAssets\n    };\n}\nconst generatePreloadAssetsPlugin = function() {\n    return {\n        name: \"generate-preload-assets-plugin\",\n        async generatePreloadAssets (args) {\n            const { origin, preloadOptions, remoteInfo, remote, globalSnapshot, remoteSnapshot } = args;\n            if ((0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.j)(remote) && (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.k)(remote)) {\n                return {\n                    cssAssets: [],\n                    jsAssetsWithoutEntry: [],\n                    entryAssets: [\n                        {\n                            name: remote.name,\n                            url: remote.entry,\n                            moduleInfo: {\n                                name: remoteInfo.name,\n                                entry: remote.entry,\n                                type: \"global\",\n                                entryGlobalName: \"\",\n                                shareScope: \"\"\n                            }\n                        }\n                    ]\n                };\n            }\n            assignRemoteInfo(remoteInfo, remoteSnapshot);\n            const assets = generatePreloadAssets(origin, preloadOptions, remoteInfo, globalSnapshot, remoteSnapshot);\n            return assets;\n        }\n    };\n};\nfunction getGlobalRemoteInfo(moduleInfo, origin) {\n    const hostGlobalSnapshot = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.q)({\n        name: origin.options.name,\n        version: origin.options.version\n    });\n    // get remote detail info from global\n    const globalRemoteInfo = hostGlobalSnapshot && \"remotesInfo\" in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.m)(hostGlobalSnapshot.remotesInfo, moduleInfo.name).value;\n    if (globalRemoteInfo && globalRemoteInfo.matchedVersion) {\n        return {\n            hostGlobalSnapshot,\n            globalSnapshot: (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.u)(),\n            remoteSnapshot: (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.q)({\n                name: moduleInfo.name,\n                version: globalRemoteInfo.matchedVersion\n            })\n        };\n    }\n    return {\n        hostGlobalSnapshot: undefined,\n        globalSnapshot: (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.u)(),\n        remoteSnapshot: (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.q)({\n            name: moduleInfo.name,\n            version: \"version\" in moduleInfo ? moduleInfo.version : undefined\n        })\n    };\n}\nclass SnapshotHandler {\n    async loadSnapshot(moduleInfo) {\n        const { options } = this.HostInstance;\n        const { hostGlobalSnapshot, remoteSnapshot, globalSnapshot } = this.getGlobalRemoteInfo(moduleInfo);\n        const { remoteSnapshot: globalRemoteSnapshot, globalSnapshot: globalSnapshotRes } = await this.hooks.lifecycle.loadSnapshot.emit({\n            options,\n            moduleInfo,\n            hostGlobalSnapshot,\n            remoteSnapshot,\n            globalSnapshot\n        });\n        return {\n            remoteSnapshot: globalRemoteSnapshot,\n            globalSnapshot: globalSnapshotRes\n        };\n    }\n    // eslint-disable-next-line max-lines-per-function\n    async loadRemoteSnapshotInfo(moduleInfo) {\n        const { options } = this.HostInstance;\n        await this.hooks.lifecycle.beforeLoadRemoteSnapshot.emit({\n            options,\n            moduleInfo\n        });\n        let hostSnapshot = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.q)({\n            name: this.HostInstance.options.name,\n            version: this.HostInstance.options.version\n        });\n        if (!hostSnapshot) {\n            hostSnapshot = {\n                version: this.HostInstance.options.version || \"\",\n                remoteEntry: \"\",\n                remotesInfo: {}\n            };\n            (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.r)({\n                [this.HostInstance.options.name]: hostSnapshot\n            });\n        }\n        // In dynamic loadRemote scenarios, incomplete remotesInfo delivery may occur. In such cases, the remotesInfo in the host needs to be completed in the snapshot at runtime.\n        // This ensures the snapshot's integrity and helps the chrome plugin correctly identify all producer modules, ensuring that proxyable producer modules will not be missing.\n        if (hostSnapshot && \"remotesInfo\" in hostSnapshot && !(0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.m)(hostSnapshot.remotesInfo, moduleInfo.name).value) {\n            if (\"version\" in moduleInfo || \"entry\" in moduleInfo) {\n                hostSnapshot.remotesInfo = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, hostSnapshot == null ? void 0 : hostSnapshot.remotesInfo, {\n                    [moduleInfo.name]: {\n                        matchedVersion: \"version\" in moduleInfo ? moduleInfo.version : moduleInfo.entry\n                    }\n                });\n            }\n        }\n        const { hostGlobalSnapshot, remoteSnapshot, globalSnapshot } = this.getGlobalRemoteInfo(moduleInfo);\n        const { remoteSnapshot: globalRemoteSnapshot, globalSnapshot: globalSnapshotRes } = await this.hooks.lifecycle.loadSnapshot.emit({\n            options,\n            moduleInfo,\n            hostGlobalSnapshot,\n            remoteSnapshot,\n            globalSnapshot\n        });\n        // global snapshot includes manifest or module info includes manifest\n        if (globalRemoteSnapshot) {\n            if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isManifestProvider)(globalRemoteSnapshot)) {\n                const remoteEntry = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() ? globalRemoteSnapshot.remoteEntry : globalRemoteSnapshot.ssrRemoteEntry || globalRemoteSnapshot.remoteEntry || \"\";\n                const moduleSnapshot = await this.getManifestJson(remoteEntry, moduleInfo, {});\n                // eslint-disable-next-line @typescript-eslint/no-shadow\n                const globalSnapshotRes = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.t)((0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, moduleInfo, {\n                    // The global remote may be overridden\n                    // Therefore, set the snapshot key to the global address of the actual request\n                    entry: remoteEntry\n                }), moduleSnapshot);\n                return {\n                    remoteSnapshot: moduleSnapshot,\n                    globalSnapshot: globalSnapshotRes\n                };\n            } else {\n                const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                    options: this.HostInstance.options,\n                    moduleInfo,\n                    remoteSnapshot: globalRemoteSnapshot,\n                    from: \"global\"\n                });\n                return {\n                    remoteSnapshot: remoteSnapshotRes,\n                    globalSnapshot: globalSnapshotRes\n                };\n            }\n        } else {\n            if ((0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.j)(moduleInfo)) {\n                // get from manifest.json and merge remote info from remote server\n                const moduleSnapshot = await this.getManifestJson(moduleInfo.entry, moduleInfo, {});\n                // eslint-disable-next-line @typescript-eslint/no-shadow\n                const globalSnapshotRes = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.t)(moduleInfo, moduleSnapshot);\n                const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                    options: this.HostInstance.options,\n                    moduleInfo,\n                    remoteSnapshot: moduleSnapshot,\n                    from: \"global\"\n                });\n                return {\n                    remoteSnapshot: remoteSnapshotRes,\n                    globalSnapshot: globalSnapshotRes\n                };\n            } else {\n                (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.f)(`\n          Cannot get remoteSnapshot with the name: '${moduleInfo.name}', version: '${moduleInfo.version}' from __FEDERATION__.moduleInfo. The following reasons may be causing the problem:\\n\n          1. The Deploy platform did not deliver the correct data. You can use __FEDERATION__.moduleInfo to check the remoteInfo.\\n\n          2. The remote '${moduleInfo.name}' version '${moduleInfo.version}' is not released.\\n\n          The transformed module info: ${JSON.stringify(globalSnapshotRes)}\n        `);\n            }\n        }\n    }\n    getGlobalRemoteInfo(moduleInfo) {\n        return getGlobalRemoteInfo(moduleInfo, this.HostInstance);\n    }\n    async getManifestJson(manifestUrl, moduleInfo, extraOptions) {\n        const getManifest = async ()=>{\n            let manifestJson = this.manifestCache.get(manifestUrl);\n            if (manifestJson) {\n                return manifestJson;\n            }\n            try {\n                let res = await this.loaderHook.lifecycle.fetch.emit(manifestUrl, {});\n                if (!res || !(res instanceof Response)) {\n                    res = await fetch(manifestUrl, {});\n                }\n                manifestJson = await res.json();\n                (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(manifestJson.metaData && manifestJson.exposes && manifestJson.shared, `${manifestUrl} is not a federation manifest`);\n                this.manifestCache.set(manifestUrl, manifestJson);\n                return manifestJson;\n            } catch (err) {\n                delete this.manifestLoading[manifestUrl];\n                (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.f)(`Failed to get manifestJson for ${moduleInfo.name}. The manifest URL is ${manifestUrl}. Please ensure that the manifestUrl is accessible.\n          \\n Error message:\n          \\n ${err}`);\n            }\n        };\n        const asyncLoadProcess = async ()=>{\n            const manifestJson = await getManifest();\n            const remoteSnapshot = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.generateSnapshotFromManifest)(manifestJson, {\n                version: manifestUrl\n            });\n            const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                options: this.HostInstance.options,\n                moduleInfo,\n                manifestJson,\n                remoteSnapshot,\n                manifestUrl,\n                from: \"manifest\"\n            });\n            return remoteSnapshotRes;\n        };\n        if (!this.manifestLoading[manifestUrl]) {\n            this.manifestLoading[manifestUrl] = asyncLoadProcess().then((res)=>res);\n        }\n        return this.manifestLoading[manifestUrl];\n    }\n    constructor(HostInstance){\n        this.loadingHostSnapshot = null;\n        this.manifestCache = new Map();\n        this.hooks = new PluginSystem({\n            beforeLoadRemoteSnapshot: new AsyncHook(\"beforeLoadRemoteSnapshot\"),\n            loadSnapshot: new AsyncWaterfallHook(\"loadGlobalSnapshot\"),\n            loadRemoteSnapshot: new AsyncWaterfallHook(\"loadRemoteSnapshot\")\n        });\n        this.manifestLoading = _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.G.__FEDERATION__.__MANIFEST_LOADING__;\n        this.HostInstance = HostInstance;\n        this.loaderHook = HostInstance.loaderHook;\n    }\n}\nclass SharedHandler {\n    // register shared in shareScopeMap\n    registerShared(globalOptions, userOptions) {\n        const { shareInfos, shared } = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.v)(globalOptions, userOptions);\n        const sharedKeys = Object.keys(shareInfos);\n        sharedKeys.forEach((sharedKey)=>{\n            const sharedVals = shareInfos[sharedKey];\n            sharedVals.forEach((sharedVal)=>{\n                const registeredShared = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(this.shareScopeMap, sharedKey, sharedVal, this.hooks.lifecycle.resolveShare);\n                if (!registeredShared && sharedVal && sharedVal.lib) {\n                    this.setShared({\n                        pkgName: sharedKey,\n                        lib: sharedVal.lib,\n                        get: sharedVal.get,\n                        loaded: true,\n                        shared: sharedVal,\n                        from: userOptions.name\n                    });\n                }\n            });\n        });\n        return {\n            shareInfos,\n            shared\n        };\n    }\n    async loadShare(pkgName, extraOptions) {\n        const { host } = this;\n        // This function performs the following steps:\n        // 1. Checks if the currently loaded share already exists, if not, it throws an error\n        // 2. Searches globally for a matching share, if found, it uses it directly\n        // 3. If not found, it retrieves it from the current share and stores the obtained share globally.\n        const shareInfo = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.x)({\n            pkgName,\n            extraOptions,\n            shareInfos: host.options.shared\n        });\n        if (shareInfo == null ? void 0 : shareInfo.scope) {\n            await Promise.all(shareInfo.scope.map(async (shareScope)=>{\n                await Promise.all(this.initializeSharing(shareScope, {\n                    strategy: shareInfo.strategy\n                }));\n                return;\n            }));\n        }\n        const loadShareRes = await this.hooks.lifecycle.beforeLoadShare.emit({\n            pkgName,\n            shareInfo,\n            shared: host.options.shared,\n            origin: host\n        });\n        const { shareInfo: shareInfoRes } = loadShareRes;\n        // Assert that shareInfoRes exists, if not, throw an error\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(shareInfoRes, `Cannot find ${pkgName} Share in the ${host.options.name}. Please ensure that the ${pkgName} Share parameters have been injected`);\n        // Retrieve from cache\n        const registeredShared = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);\n        const addUseIn = (shared)=>{\n            if (!shared.useIn) {\n                shared.useIn = [];\n            }\n            (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.z)(shared.useIn, host.options.name);\n        };\n        if (registeredShared && registeredShared.lib) {\n            addUseIn(registeredShared);\n            return registeredShared.lib;\n        } else if (registeredShared && registeredShared.loading && !registeredShared.loaded) {\n            const factory = await registeredShared.loading;\n            registeredShared.loaded = true;\n            if (!registeredShared.lib) {\n                registeredShared.lib = factory;\n            }\n            addUseIn(registeredShared);\n            return factory;\n        } else if (registeredShared) {\n            const asyncLoadProcess = async ()=>{\n                const factory = await registeredShared.get();\n                shareInfoRes.lib = factory;\n                shareInfoRes.loaded = true;\n                addUseIn(shareInfoRes);\n                const gShared = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);\n                if (gShared) {\n                    gShared.lib = factory;\n                    gShared.loaded = true;\n                }\n                return factory;\n            };\n            const loading = asyncLoadProcess();\n            this.setShared({\n                pkgName,\n                loaded: false,\n                shared: registeredShared,\n                from: host.options.name,\n                lib: null,\n                loading\n            });\n            return loading;\n        } else {\n            if (extraOptions == null ? void 0 : extraOptions.customShareInfo) {\n                return false;\n            }\n            const asyncLoadProcess = async ()=>{\n                const factory = await shareInfoRes.get();\n                shareInfoRes.lib = factory;\n                shareInfoRes.loaded = true;\n                addUseIn(shareInfoRes);\n                const gShared = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);\n                if (gShared) {\n                    gShared.lib = factory;\n                    gShared.loaded = true;\n                }\n                return factory;\n            };\n            const loading = asyncLoadProcess();\n            this.setShared({\n                pkgName,\n                loaded: false,\n                shared: shareInfoRes,\n                from: host.options.name,\n                lib: null,\n                loading\n            });\n            return loading;\n        }\n    }\n    /**\n   * This function initializes the sharing sequence (executed only once per share scope).\n   * It accepts one argument, the name of the share scope.\n   * If the share scope does not exist, it creates one.\n   */ // eslint-disable-next-line @typescript-eslint/member-ordering\n    initializeSharing(shareScopeName = _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.b, extraOptions) {\n        const { host } = this;\n        const from = extraOptions == null ? void 0 : extraOptions.from;\n        const strategy = extraOptions == null ? void 0 : extraOptions.strategy;\n        let initScope = extraOptions == null ? void 0 : extraOptions.initScope;\n        const promises = [];\n        if (from !== \"build\") {\n            const { initTokens } = this;\n            if (!initScope) initScope = [];\n            let initToken = initTokens[shareScopeName];\n            if (!initToken) initToken = initTokens[shareScopeName] = {\n                from: this.host.name\n            };\n            if (initScope.indexOf(initToken) >= 0) return promises;\n            initScope.push(initToken);\n        }\n        const shareScope = this.shareScopeMap;\n        const hostName = host.options.name;\n        // Creates a new share scope if necessary\n        if (!shareScope[shareScopeName]) {\n            shareScope[shareScopeName] = {};\n        }\n        // Executes all initialization snippets from all accessible modules\n        const scope = shareScope[shareScopeName];\n        const register = (name, shared)=>{\n            var _activeVersion_shareConfig;\n            const { version, eager } = shared;\n            scope[name] = scope[name] || {};\n            const versions = scope[name];\n            const activeVersion = versions[version];\n            const activeVersionEager = Boolean(activeVersion && (activeVersion.eager || ((_activeVersion_shareConfig = activeVersion.shareConfig) == null ? void 0 : _activeVersion_shareConfig.eager)));\n            if (!activeVersion || activeVersion.strategy !== \"loaded-first\" && !activeVersion.loaded && (Boolean(!eager) !== !activeVersionEager ? eager : hostName > activeVersion.from)) {\n                versions[version] = shared;\n            }\n        };\n        const initFn = (mod)=>mod && mod.init && mod.init(shareScope[shareScopeName], initScope);\n        const initRemoteModule = async (key)=>{\n            const { module } = await host.remoteHandler.getRemoteModuleAndOptions({\n                id: key\n            });\n            if (module.getEntry) {\n                const entry = await module.getEntry();\n                if (!module.inited) {\n                    await initFn(entry);\n                    module.inited = true;\n                }\n            }\n        };\n        Object.keys(host.options.shared).forEach((shareName)=>{\n            const sharedArr = host.options.shared[shareName];\n            sharedArr.forEach((shared)=>{\n                if (shared.scope.includes(shareScopeName)) {\n                    register(shareName, shared);\n                }\n            });\n        });\n        // TODO: strategy==='version-first' need to be removed in the future\n        if (host.options.shareStrategy === \"version-first\" || strategy === \"version-first\") {\n            host.options.remotes.forEach((remote)=>{\n                if (remote.shareScope === shareScopeName) {\n                    promises.push(initRemoteModule(remote.name));\n                }\n            });\n        }\n        return promises;\n    }\n    // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.\n    // 1. If the loaded shared already exists globally, then it will be reused\n    // 2. If lib exists in local shared, it will be used directly\n    // 3. If the local get returns something other than Promise, then it will be used directly\n    loadShareSync(pkgName, extraOptions) {\n        const { host } = this;\n        const shareInfo = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.x)({\n            pkgName,\n            extraOptions,\n            shareInfos: host.options.shared\n        });\n        if (shareInfo == null ? void 0 : shareInfo.scope) {\n            shareInfo.scope.forEach((shareScope)=>{\n                this.initializeSharing(shareScope, {\n                    strategy: shareInfo.strategy\n                });\n            });\n        }\n        const registeredShared = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(this.shareScopeMap, pkgName, shareInfo, this.hooks.lifecycle.resolveShare);\n        const addUseIn = (shared)=>{\n            if (!shared.useIn) {\n                shared.useIn = [];\n            }\n            (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.z)(shared.useIn, host.options.name);\n        };\n        if (registeredShared) {\n            if (typeof registeredShared.lib === \"function\") {\n                addUseIn(registeredShared);\n                if (!registeredShared.loaded) {\n                    registeredShared.loaded = true;\n                    if (registeredShared.from === host.options.name) {\n                        shareInfo.loaded = true;\n                    }\n                }\n                return registeredShared.lib;\n            }\n            if (typeof registeredShared.get === \"function\") {\n                const module = registeredShared.get();\n                if (!(module instanceof Promise)) {\n                    addUseIn(registeredShared);\n                    this.setShared({\n                        pkgName,\n                        loaded: true,\n                        from: host.options.name,\n                        lib: module,\n                        shared: registeredShared\n                    });\n                    return module;\n                }\n            }\n        }\n        if (shareInfo.lib) {\n            if (!shareInfo.loaded) {\n                shareInfo.loaded = true;\n            }\n            return shareInfo.lib;\n        }\n        if (shareInfo.get) {\n            const module = shareInfo.get();\n            if (module instanceof Promise) {\n                throw new Error(`\n        The loadShareSync function was unable to load ${pkgName}. The ${pkgName} could not be found in ${host.options.name}.\n        Possible reasons for failure: \\n\n        1. The ${pkgName} share was registered with the 'get' attribute, but loadShare was not used beforehand.\\n\n        2. The ${pkgName} share was not registered with the 'lib' attribute.\\n\n      `);\n            }\n            shareInfo.lib = module;\n            this.setShared({\n                pkgName,\n                loaded: true,\n                from: host.options.name,\n                lib: shareInfo.lib,\n                shared: shareInfo\n            });\n            return shareInfo.lib;\n        }\n        throw new Error(`\n        The loadShareSync function was unable to load ${pkgName}. The ${pkgName} could not be found in ${host.options.name}.\n        Possible reasons for failure: \\n\n        1. The ${pkgName} share was registered with the 'get' attribute, but loadShare was not used beforehand.\\n\n        2. The ${pkgName} share was not registered with the 'lib' attribute.\\n\n      `);\n    }\n    initShareScopeMap(scopeName, shareScope, extraOptions = {}) {\n        const { host } = this;\n        this.shareScopeMap[scopeName] = shareScope;\n        this.hooks.lifecycle.initContainerShareScopeMap.emit({\n            shareScope,\n            options: host.options,\n            origin: host,\n            scopeName,\n            hostShareScopeMap: extraOptions.hostShareScopeMap\n        });\n    }\n    setShared({ pkgName, shared, from, lib, loading, loaded, get }) {\n        const { version, scope = \"default\" } = shared, shareInfo = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(shared, [\n            \"version\",\n            \"scope\"\n        ]);\n        const scopes = Array.isArray(scope) ? scope : [\n            scope\n        ];\n        scopes.forEach((sc)=>{\n            if (!this.shareScopeMap[sc]) {\n                this.shareScopeMap[sc] = {};\n            }\n            if (!this.shareScopeMap[sc][pkgName]) {\n                this.shareScopeMap[sc][pkgName] = {};\n            }\n            if (this.shareScopeMap[sc][pkgName][version]) {\n                return;\n            }\n            this.shareScopeMap[sc][pkgName][version] = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                version,\n                scope: [\n                    \"default\"\n                ]\n            }, shareInfo, {\n                lib,\n                loaded,\n                loading\n            });\n            if (get) {\n                this.shareScopeMap[sc][pkgName][version].get = get;\n            }\n        });\n    }\n    _setGlobalShareScopeMap(hostOptions) {\n        const globalShareScopeMap = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.y)();\n        const identifier = hostOptions.id || hostOptions.name;\n        if (identifier && !globalShareScopeMap[identifier]) {\n            globalShareScopeMap[identifier] = this.shareScopeMap;\n        }\n    }\n    constructor(host){\n        this.hooks = new PluginSystem({\n            afterResolve: new AsyncWaterfallHook(\"afterResolve\"),\n            beforeLoadShare: new AsyncWaterfallHook(\"beforeLoadShare\"),\n            // not used yet\n            loadShare: new AsyncHook(),\n            resolveShare: new SyncWaterfallHook(\"resolveShare\"),\n            // maybe will change, temporarily for internal use only\n            initContainerShareScopeMap: new SyncWaterfallHook(\"initContainerShareScopeMap\")\n        });\n        this.host = host;\n        this.shareScopeMap = {};\n        this.initTokens = {};\n        this._setGlobalShareScopeMap(host.options);\n    }\n}\nclass RemoteHandler {\n    formatAndRegisterRemote(globalOptions, userOptions) {\n        const userRemotes = userOptions.remotes || [];\n        return userRemotes.reduce((res, remote)=>{\n            this.registerRemote(remote, res, {\n                force: false\n            });\n            return res;\n        }, globalOptions.remotes);\n    }\n    setIdToRemoteMap(id, remoteMatchInfo) {\n        const { remote, expose } = remoteMatchInfo;\n        const { name, alias } = remote;\n        this.idToRemoteMap[id] = {\n            name: remote.name,\n            expose\n        };\n        if (alias && id.startsWith(name)) {\n            const idWithAlias = id.replace(name, alias);\n            this.idToRemoteMap[idWithAlias] = {\n                name: remote.name,\n                expose\n            };\n            return;\n        }\n        if (alias && id.startsWith(alias)) {\n            const idWithName = id.replace(alias, name);\n            this.idToRemoteMap[idWithName] = {\n                name: remote.name,\n                expose\n            };\n        }\n    }\n    // eslint-disable-next-line max-lines-per-function\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async loadRemote(id, options) {\n        const { host } = this;\n        try {\n            const { loadFactory = true } = options || {\n                loadFactory: true\n            };\n            // 1. Validate the parameters of the retrieved module. There are two module request methods: pkgName + expose and alias + expose.\n            // 2. Request the snapshot information of the current host and globally store the obtained snapshot information. The retrieved module information is partially offline and partially online. The online module information will retrieve the modules used online.\n            // 3. Retrieve the detailed information of the current module from global (remoteEntry address, expose resource address)\n            // 4. After retrieving remoteEntry, call the init of the module, and then retrieve the exported content of the module through get\n            // id: pkgName(@federation/app1) + expose(button) = @federation/app1/button\n            // id: alias(app1) + expose(button) = app1/button\n            // id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort\n            const { module, moduleOptions, remoteMatchInfo } = await this.getRemoteModuleAndOptions({\n                id\n            });\n            const { pkgNameOrAlias, remote, expose, id: idRes } = remoteMatchInfo;\n            const moduleOrFactory = await module.get(idRes, expose, options);\n            const moduleWrapper = await this.hooks.lifecycle.onLoad.emit({\n                id: idRes,\n                pkgNameOrAlias,\n                expose,\n                exposeModule: loadFactory ? moduleOrFactory : undefined,\n                exposeModuleFactory: loadFactory ? undefined : moduleOrFactory,\n                remote,\n                options: moduleOptions,\n                moduleInstance: module,\n                origin: host\n            });\n            this.setIdToRemoteMap(id, remoteMatchInfo);\n            if (typeof moduleWrapper === \"function\") {\n                return moduleWrapper;\n            }\n            return moduleOrFactory;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async preloadRemote(preloadOptions) {\n        const { host } = this;\n        await this.hooks.lifecycle.beforePreloadRemote.emit({\n            preloadOps: preloadOptions,\n            options: host.options,\n            origin: host\n        });\n        const preloadOps = formatPreloadArgs(host.options.remotes, preloadOptions);\n        await Promise.all(preloadOps.map(async (ops)=>{\n            const { remote } = ops;\n            const remoteInfo = getRemoteInfo(remote);\n            const { globalSnapshot, remoteSnapshot } = await host.snapshotHandler.loadRemoteSnapshotInfo(remote);\n            const assets = await this.hooks.lifecycle.generatePreloadAssets.emit({\n                origin: host,\n                preloadOptions: ops,\n                remote,\n                remoteInfo,\n                globalSnapshot,\n                remoteSnapshot\n            });\n            if (!assets) {\n                return;\n            }\n            preloadAssets(remoteInfo, host, assets);\n        }));\n    }\n    registerRemotes(remotes, options) {\n        const { host } = this;\n        remotes.forEach((remote)=>{\n            this.registerRemote(remote, host.options.remotes, {\n                force: options == null ? void 0 : options.force\n            });\n        });\n    }\n    async getRemoteModuleAndOptions(options) {\n        const { host } = this;\n        const { id } = options;\n        let loadRemoteArgs;\n        try {\n            loadRemoteArgs = await this.hooks.lifecycle.beforeRequest.emit({\n                id,\n                options: host.options,\n                origin: host\n            });\n        } catch (error) {\n            loadRemoteArgs = await this.hooks.lifecycle.errorLoadRemote.emit({\n                id,\n                options: host.options,\n                origin: host,\n                from: \"runtime\",\n                error,\n                lifecycle: \"beforeRequest\"\n            });\n            if (!loadRemoteArgs) {\n                throw error;\n            }\n        }\n        const { id: idRes } = loadRemoteArgs;\n        const remoteSplitInfo = matchRemoteWithNameAndExpose(host.options.remotes, idRes);\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(remoteSplitInfo, `\n        Unable to locate ${idRes} in ${host.options.name}. Potential reasons for failure include:\\n\n        1. ${idRes} was not included in the 'remotes' parameter of ${host.options.name || \"the host\"}.\\n\n        2. ${idRes} could not be found in the 'remotes' of ${host.options.name} with either 'name' or 'alias' attributes.\n        3. ${idRes} is not online, injected, or loaded.\n        4. ${idRes}  cannot be accessed on the expected.\n        5. The 'beforeRequest' hook was provided but did not return the correct 'remoteInfo' when attempting to load ${idRes}.\n      `);\n        const { remote: rawRemote } = remoteSplitInfo;\n        const remoteInfo = getRemoteInfo(rawRemote);\n        const matchInfo = await host.sharedHandler.hooks.lifecycle.afterResolve.emit((0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n            id: idRes\n        }, remoteSplitInfo, {\n            options: host.options,\n            origin: host,\n            remoteInfo\n        }));\n        const { remote, expose } = matchInfo;\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(remote && expose, `The 'beforeRequest' hook was executed, but it failed to return the correct 'remote' and 'expose' values while loading ${idRes}.`);\n        let module = host.moduleCache.get(remote.name);\n        const moduleOptions = {\n            host: host,\n            remoteInfo\n        };\n        if (!module) {\n            module = new Module(moduleOptions);\n            host.moduleCache.set(remote.name, module);\n        }\n        return {\n            module,\n            moduleOptions,\n            remoteMatchInfo: matchInfo\n        };\n    }\n    registerRemote(remote, targetRemotes, options) {\n        const { host } = this;\n        const normalizeRemote = ()=>{\n            if (remote.alias) {\n                // Validate if alias equals the prefix of remote.name and remote.alias, if so, throw an error\n                // As multi-level path references cannot guarantee unique names, alias being a prefix of remote.name is not supported\n                const findEqual = targetRemotes.find((item)=>{\n                    var _item_alias;\n                    return remote.alias && (item.name.startsWith(remote.alias) || ((_item_alias = item.alias) == null ? void 0 : _item_alias.startsWith(remote.alias)));\n                });\n                (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(!findEqual, `The alias ${remote.alias} of remote ${remote.name} is not allowed to be the prefix of ${findEqual && findEqual.name} name or alias`);\n            }\n            // Set the remote entry to a complete path\n            if (\"entry\" in remote) {\n                if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() && !remote.entry.startsWith(\"http\")) {\n                    remote.entry = new URL(remote.entry, window.location.origin).href;\n                }\n            }\n            if (!remote.shareScope) {\n                remote.shareScope = _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.b;\n            }\n            if (!remote.type) {\n                remote.type = _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.D;\n            }\n        };\n        this.hooks.lifecycle.beforeRegisterRemote.emit({\n            remote,\n            origin: host\n        });\n        const registeredRemote = targetRemotes.find((item)=>item.name === remote.name);\n        if (!registeredRemote) {\n            normalizeRemote();\n            targetRemotes.push(remote);\n            this.hooks.lifecycle.registerRemote.emit({\n                remote,\n                origin: host\n            });\n        } else {\n            const messages = [\n                `The remote \"${remote.name}\" is already registered.`,\n                (options == null ? void 0 : options.force) ? \"Hope you have known that OVERRIDE it may have some unexpected errors\" : 'If you want to merge the remote, you can set \"force: true\".'\n            ];\n            if (options == null ? void 0 : options.force) {\n                // remove registered remote\n                this.removeRemote(registeredRemote);\n                normalizeRemote();\n                targetRemotes.push(remote);\n                this.hooks.lifecycle.registerRemote.emit({\n                    remote,\n                    origin: host\n                });\n            }\n            (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.warn)(messages.join(\" \"));\n        }\n    }\n    removeRemote(remote) {\n        try {\n            const { host } = this;\n            const { name } = remote;\n            const remoteIndex = host.options.remotes.findIndex((item)=>item.name === name);\n            if (remoteIndex !== -1) {\n                host.options.remotes.splice(remoteIndex, 1);\n            }\n            const loadedModule = host.moduleCache.get(remote.name);\n            if (loadedModule) {\n                const remoteInfo = loadedModule.remoteInfo;\n                const key = remoteInfo.entryGlobalName;\n                if (globalThis[key]) {\n                    var _Object_getOwnPropertyDescriptor;\n                    if ((_Object_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(globalThis, key)) == null ? void 0 : _Object_getOwnPropertyDescriptor.configurable) {\n                        delete globalThis[key];\n                    } else {\n                        // @ts-ignore\n                        globalThis[key] = undefined;\n                    }\n                }\n                const remoteEntryUniqueKey = getRemoteEntryUniqueKey(loadedModule.remoteInfo);\n                if (_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.a[remoteEntryUniqueKey]) {\n                    delete _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.a[remoteEntryUniqueKey];\n                }\n                host.snapshotHandler.manifestCache.delete(remoteInfo.entry);\n                // delete unloaded shared and instance\n                let remoteInsId = remoteInfo.buildVersion ? (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.composeKeyWithSeparator)(remoteInfo.name, remoteInfo.buildVersion) : remoteInfo.name;\n                const remoteInsIndex = globalThis.__FEDERATION__.__INSTANCES__.findIndex((ins)=>{\n                    if (remoteInfo.buildVersion) {\n                        return ins.options.id === remoteInsId;\n                    } else {\n                        return ins.name === remoteInsId;\n                    }\n                });\n                if (remoteInsIndex !== -1) {\n                    const remoteIns = globalThis.__FEDERATION__.__INSTANCES__[remoteInsIndex];\n                    remoteInsId = remoteIns.options.id || remoteInsId;\n                    const globalShareScopeMap = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.y)();\n                    let isAllSharedNotUsed = true;\n                    const needDeleteKeys = [];\n                    Object.keys(globalShareScopeMap).forEach((instId)=>{\n                        const shareScopeMap = globalShareScopeMap[instId];\n                        shareScopeMap && Object.keys(shareScopeMap).forEach((shareScope)=>{\n                            const shareScopeVal = shareScopeMap[shareScope];\n                            shareScopeVal && Object.keys(shareScopeVal).forEach((shareName)=>{\n                                const sharedPkgs = shareScopeVal[shareName];\n                                sharedPkgs && Object.keys(sharedPkgs).forEach((shareVersion)=>{\n                                    const shared = sharedPkgs[shareVersion];\n                                    if (shared && typeof shared === \"object\" && shared.from === remoteInfo.name) {\n                                        if (shared.loaded || shared.loading) {\n                                            shared.useIn = shared.useIn.filter((usedHostName)=>usedHostName !== remoteInfo.name);\n                                            if (shared.useIn.length) {\n                                                isAllSharedNotUsed = false;\n                                            } else {\n                                                needDeleteKeys.push([\n                                                    instId,\n                                                    shareScope,\n                                                    shareName,\n                                                    shareVersion\n                                                ]);\n                                            }\n                                        } else {\n                                            needDeleteKeys.push([\n                                                instId,\n                                                shareScope,\n                                                shareName,\n                                                shareVersion\n                                            ]);\n                                        }\n                                    }\n                                });\n                            });\n                        });\n                    });\n                    if (isAllSharedNotUsed) {\n                        remoteIns.shareScopeMap = {};\n                        delete globalShareScopeMap[remoteInsId];\n                    }\n                    needDeleteKeys.forEach(([insId, shareScope, shareName, shareVersion])=>{\n                        var _globalShareScopeMap_insId_shareScope_shareName, _globalShareScopeMap_insId_shareScope, _globalShareScopeMap_insId;\n                        (_globalShareScopeMap_insId = globalShareScopeMap[insId]) == null ? true : (_globalShareScopeMap_insId_shareScope = _globalShareScopeMap_insId[shareScope]) == null ? true : (_globalShareScopeMap_insId_shareScope_shareName = _globalShareScopeMap_insId_shareScope[shareName]) == null ? true : delete _globalShareScopeMap_insId_shareScope_shareName[shareVersion];\n                    });\n                    globalThis.__FEDERATION__.__INSTANCES__.splice(remoteInsIndex, 1);\n                }\n                const { hostGlobalSnapshot } = getGlobalRemoteInfo(remote, host);\n                if (hostGlobalSnapshot) {\n                    const remoteKey = hostGlobalSnapshot && \"remotesInfo\" in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.m)(hostGlobalSnapshot.remotesInfo, remote.name).key;\n                    if (remoteKey) {\n                        delete hostGlobalSnapshot.remotesInfo[remoteKey];\n                        if (Boolean(_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.G.__FEDERATION__.__MANIFEST_LOADING__[remoteKey])) {\n                            delete _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.G.__FEDERATION__.__MANIFEST_LOADING__[remoteKey];\n                        }\n                    }\n                }\n                host.moduleCache.delete(remote.name);\n            }\n        } catch (err) {\n            console.log(\"removeRemote fail: \", err);\n        }\n    }\n    constructor(host){\n        this.hooks = new PluginSystem({\n            beforeRegisterRemote: new SyncWaterfallHook(\"beforeRegisterRemote\"),\n            registerRemote: new SyncWaterfallHook(\"registerRemote\"),\n            beforeRequest: new AsyncWaterfallHook(\"beforeRequest\"),\n            onLoad: new AsyncHook(\"onLoad\"),\n            handlePreloadModule: new SyncHook(\"handlePreloadModule\"),\n            errorLoadRemote: new AsyncHook(\"errorLoadRemote\"),\n            beforePreloadRemote: new AsyncHook(\"beforePreloadRemote\"),\n            generatePreloadAssets: new AsyncHook(\"generatePreloadAssets\"),\n            // not used yet\n            afterPreloadRemote: new AsyncHook(),\n            loadEntry: new AsyncHook()\n        });\n        this.host = host;\n        this.idToRemoteMap = {};\n    }\n}\nclass FederationHost {\n    initOptions(userOptions) {\n        this.registerPlugins(userOptions.plugins);\n        const options = this.formatOptions(this.options, userOptions);\n        this.options = options;\n        return options;\n    }\n    async loadShare(pkgName, extraOptions) {\n        return this.sharedHandler.loadShare(pkgName, extraOptions);\n    }\n    // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.\n    // 1. If the loaded shared already exists globally, then it will be reused\n    // 2. If lib exists in local shared, it will be used directly\n    // 3. If the local get returns something other than Promise, then it will be used directly\n    loadShareSync(pkgName, extraOptions) {\n        return this.sharedHandler.loadShareSync(pkgName, extraOptions);\n    }\n    initializeSharing(shareScopeName = _share_esm_js__WEBPACK_IMPORTED_MODULE_2__.b, extraOptions) {\n        return this.sharedHandler.initializeSharing(shareScopeName, extraOptions);\n    }\n    initRawContainer(name, url, container) {\n        const remoteInfo = getRemoteInfo({\n            name,\n            entry: url\n        });\n        const module = new Module({\n            host: this,\n            remoteInfo\n        });\n        module.remoteEntryExports = container;\n        this.moduleCache.set(name, module);\n        return module;\n    }\n    // eslint-disable-next-line max-lines-per-function\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async loadRemote(id, options) {\n        return this.remoteHandler.loadRemote(id, options);\n    }\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async preloadRemote(preloadOptions) {\n        return this.remoteHandler.preloadRemote(preloadOptions);\n    }\n    initShareScopeMap(scopeName, shareScope, extraOptions = {}) {\n        this.sharedHandler.initShareScopeMap(scopeName, shareScope, extraOptions);\n    }\n    formatOptions(globalOptions, userOptions) {\n        const { shared } = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.v)(globalOptions, userOptions);\n        const { userOptions: userOptionsRes, options: globalOptionsRes } = this.hooks.lifecycle.beforeInit.emit({\n            origin: this,\n            userOptions,\n            options: globalOptions,\n            shareInfo: shared\n        });\n        const remotes = this.remoteHandler.formatAndRegisterRemote(globalOptionsRes, userOptionsRes);\n        const { shared: handledShared } = this.sharedHandler.registerShared(globalOptionsRes, userOptionsRes);\n        const plugins = [\n            ...globalOptionsRes.plugins\n        ];\n        if (userOptionsRes.plugins) {\n            userOptionsRes.plugins.forEach((plugin)=>{\n                if (!plugins.includes(plugin)) {\n                    plugins.push(plugin);\n                }\n            });\n        }\n        const optionsRes = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, globalOptions, userOptions, {\n            plugins,\n            remotes,\n            shared: handledShared\n        });\n        this.hooks.lifecycle.init.emit({\n            origin: this,\n            options: optionsRes\n        });\n        return optionsRes;\n    }\n    registerPlugins(plugins) {\n        const pluginRes = registerPlugins$1(plugins, [\n            this.hooks,\n            this.remoteHandler.hooks,\n            this.sharedHandler.hooks,\n            this.snapshotHandler.hooks,\n            this.loaderHook\n        ]);\n        // Merge plugin\n        this.options.plugins = this.options.plugins.reduce((res, plugin)=>{\n            if (!plugin) return res;\n            if (res && !res.find((item)=>item.name === plugin.name)) {\n                res.push(plugin);\n            }\n            return res;\n        }, pluginRes || []);\n    }\n    registerRemotes(remotes, options) {\n        return this.remoteHandler.registerRemotes(remotes, options);\n    }\n    constructor(userOptions){\n        this.hooks = new PluginSystem({\n            beforeInit: new SyncWaterfallHook(\"beforeInit\"),\n            init: new SyncHook(),\n            // maybe will change, temporarily for internal use only\n            beforeInitContainer: new AsyncWaterfallHook(\"beforeInitContainer\"),\n            // maybe will change, temporarily for internal use only\n            initContainer: new AsyncWaterfallHook(\"initContainer\")\n        });\n        this.version = \"0.6.0\";\n        this.moduleCache = new Map();\n        this.loaderHook = new PluginSystem({\n            // FIXME: may not be suitable , not open to the public yet\n            getModuleInfo: new SyncHook(),\n            createScript: new SyncHook(),\n            createLink: new SyncHook(),\n            // only work for manifest , so not open to the public yet\n            fetch: new AsyncHook()\n        });\n        // TODO: Validate the details of the options\n        // Initialize options with default values\n        const defaultOptions = {\n            id: (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.A)(),\n            name: userOptions.name,\n            plugins: [\n                snapshotPlugin(),\n                generatePreloadAssetsPlugin()\n            ],\n            remotes: [],\n            shared: {},\n            inBrowser: (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)()\n        };\n        this.name = userOptions.name;\n        this.options = defaultOptions;\n        this.snapshotHandler = new SnapshotHandler(this);\n        this.sharedHandler = new SharedHandler(this);\n        this.remoteHandler = new RemoteHandler(this);\n        this.shareScopeMap = this.sharedHandler.shareScopeMap;\n        this.registerPlugins([\n            ...defaultOptions.plugins,\n            ...userOptions.plugins || []\n        ]);\n        this.options = this.formatOptions(defaultOptions, userOptions);\n    }\n}\nlet FederationInstance = null;\nfunction init(options) {\n    // Retrieve the same instance with the same name\n    const instance = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.C)(options.name, options.version);\n    if (!instance) {\n        // Retrieve debug constructor\n        const FederationConstructor = (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.E)() || FederationHost;\n        FederationInstance = new FederationConstructor(options);\n        (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.F)(FederationInstance);\n        return FederationInstance;\n    } else {\n        // Merge options\n        instance.initOptions(options);\n        if (!FederationInstance) {\n            FederationInstance = instance;\n        }\n        return instance;\n    }\n}\nfunction loadRemote(...args) {\n    (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(FederationInstance, \"Please call init first\");\n    const loadRemote1 = FederationInstance.loadRemote;\n    // eslint-disable-next-line prefer-spread\n    return loadRemote1.apply(FederationInstance, args);\n}\nfunction loadShare(...args) {\n    (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(FederationInstance, \"Please call init first\");\n    // eslint-disable-next-line prefer-spread\n    const loadShare1 = FederationInstance.loadShare;\n    return loadShare1.apply(FederationInstance, args);\n}\nfunction loadShareSync(...args) {\n    (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(FederationInstance, \"Please call init first\");\n    const loadShareSync1 = FederationInstance.loadShareSync;\n    // eslint-disable-next-line prefer-spread\n    return loadShareSync1.apply(FederationInstance, args);\n}\nfunction preloadRemote(...args) {\n    (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(FederationInstance, \"Please call init first\");\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.preloadRemote.apply(FederationInstance, args);\n}\nfunction registerRemotes(...args) {\n    (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(FederationInstance, \"Please call init first\");\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.registerRemotes.apply(FederationInstance, args);\n}\nfunction registerPlugins(...args) {\n    (0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(FederationInstance, \"Please call init first\");\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.registerPlugins.apply(FederationInstance, args);\n}\nfunction getInstance() {\n    return FederationInstance;\n}\n// Inject for debug\n(0,_share_esm_js__WEBPACK_IMPORTED_MODULE_2__.B)(FederationHost);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/runtime/dist/index.esm.js\n");

/***/ }),

/***/ "../../packages/runtime/dist/polyfills.esm.js":
/*!****************************************************!*\
  !*** ../../packages/runtime/dist/polyfills.esm.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _extends),\n/* harmony export */   a: () => (/* binding */ _object_without_properties_loose)\n/* harmony export */ });\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _object_without_properties_loose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcGFja2FnZXMvcnVudGltZS9kaXN0L3BvbHlmaWxscy5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQTtJQUNMQSxXQUFXQyxPQUFPQyxNQUFNLElBQUksU0FBU0EsT0FBT0MsTUFBTTtRQUM5QyxJQUFJLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFJO1lBQ3JDLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRTtZQUN6QixJQUFJLElBQUlJLE9BQU9ELE9BQU8sSUFBSU4sT0FBT1EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osUUFBUUMsTUFBTUwsTUFBTSxDQUFDSyxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUMxRztRQUNBLE9BQU9MO0lBQ1g7SUFDQSxPQUFPSCxTQUFTWSxLQUFLLENBQUMsSUFBSSxFQUFFUDtBQUNoQztBQUVBLFNBQVNRLGlDQUFpQ04sTUFBTSxFQUFFTyxRQUFRO0lBQ3RELElBQUlQLFVBQVUsTUFBTSxPQUFPLENBQUM7SUFDNUIsSUFBSUosU0FBUyxDQUFDO0lBQ2QsSUFBSVksYUFBYWQsT0FBT2UsSUFBSSxDQUFDVDtJQUM3QixJQUFJQyxLQUFLSjtJQUNULElBQUlBLElBQUksR0FBR0EsSUFBSVcsV0FBV1QsTUFBTSxFQUFFRixJQUFJO1FBQ2xDSSxNQUFNTyxVQUFVLENBQUNYLEVBQUU7UUFDbkIsSUFBSVUsU0FBU0csT0FBTyxDQUFDVCxRQUFRLEdBQUc7UUFDaENMLE1BQU0sQ0FBQ0ssSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7SUFDN0I7SUFDQSxPQUFPTDtBQUNYO0FBRWdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vcGFja2FnZXMvcnVudGltZS9kaXN0L3BvbHlmaWxscy5lc20uanM/NDFhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgICAgICBmb3IodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBzb3VyY2UpaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllc19sb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gICAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gICAgdmFyIHRhcmdldCA9IHt9O1xuICAgIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICB2YXIga2V5LCBpO1xuICAgIGZvcihpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuXG5leHBvcnQgeyBfZXh0ZW5kcyBhcyBfLCBfb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllc19sb29zZSBhcyBhIH07XG4iXSwibmFtZXMiOlsiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllc19sb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImtleXMiLCJpbmRleE9mIiwiXyIsImEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../packages/runtime/dist/polyfills.esm.js\n");

/***/ }),

/***/ "../../packages/runtime/dist/share.esm.js":
/*!************************************************!*\
  !*** ../../packages/runtime/dist/share.esm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ getBuilderId),\n/* harmony export */   B: () => (/* binding */ setGlobalFederationConstructor),\n/* harmony export */   C: () => (/* binding */ getGlobalFederationInstance),\n/* harmony export */   D: () => (/* binding */ DEFAULT_REMOTE_TYPE),\n/* harmony export */   E: () => (/* binding */ getGlobalFederationConstructor),\n/* harmony export */   F: () => (/* binding */ setGlobalFederationInstance),\n/* harmony export */   G: () => (/* binding */ Global),\n/* harmony export */   H: () => (/* binding */ registerGlobalPlugins),\n/* harmony export */   I: () => (/* binding */ nativeGlobal),\n/* harmony export */   J: () => (/* binding */ resetFederationGlobalInfo),\n/* harmony export */   K: () => (/* binding */ getTargetSnapshotInfoByModuleInfo),\n/* harmony export */   a: () => (/* binding */ globalLoading),\n/* harmony export */   b: () => (/* binding */ DEFAULT_SCOPE),\n/* harmony export */   c: () => (/* binding */ getRemoteEntryExports),\n/* harmony export */   d: () => (/* binding */ assert),\n/* harmony export */   e: () => (/* binding */ getFMId),\n/* harmony export */   f: () => (/* binding */ error),\n/* harmony export */   g: () => (/* binding */ getGlobalHostPlugins),\n/* harmony export */   h: () => (/* binding */ isPlainObject),\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   j: () => (/* binding */ isRemoteInfoWithEntry),\n/* harmony export */   k: () => (/* binding */ isPureRemoteEntry),\n/* harmony export */   l: () => (/* binding */ getRemoteEntryInfoFromSnapshot),\n/* harmony export */   m: () => (/* binding */ getInfoWithoutType),\n/* harmony export */   n: () => (/* binding */ getPreloaded),\n/* harmony export */   o: () => (/* binding */ getRegisteredShare),\n/* harmony export */   p: () => (/* binding */ arrayOptions),\n/* harmony export */   q: () => (/* binding */ getGlobalSnapshotInfoByModuleInfo),\n/* harmony export */   r: () => (/* binding */ addGlobalSnapshot),\n/* harmony export */   s: () => (/* binding */ setPreloaded),\n/* harmony export */   t: () => (/* binding */ setGlobalSnapshotInfoByModuleInfo),\n/* harmony export */   u: () => (/* binding */ getGlobalSnapshot),\n/* harmony export */   v: () => (/* binding */ formatShareConfigs),\n/* harmony export */   w: () => (/* binding */ warn),\n/* harmony export */   x: () => (/* binding */ getTargetSharedOptions),\n/* harmony export */   y: () => (/* binding */ getGlobalShareScope),\n/* harmony export */   z: () => (/* binding */ addUniqueItem)\n/* harmony export */ });\n/* harmony import */ var _polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills.esm.js */ \"../../packages/runtime/dist/polyfills.esm.js\");\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @module-federation/sdk */ \"../../packages/sdk/dist/index.esm.js\");\n\n\nfunction getBuilderId() {\n    //@ts-ignore\n    return  true ? \"checkout:1.0.0\" : 0;\n}\nconst LOG_CATEGORY = \"[ Federation Runtime ]\";\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction assert(condition, msg) {\n    if (!condition) {\n        error(msg);\n    }\n}\nfunction error(msg) {\n    if (msg instanceof Error) {\n        msg.message = `${LOG_CATEGORY}: ${msg.message}`;\n        throw msg;\n    }\n    throw new Error(`${LOG_CATEGORY}: ${msg}`);\n}\nfunction warn(msg) {\n    if (msg instanceof Error) {\n        msg.message = `${LOG_CATEGORY}: ${msg.message}`;\n        console.warn(msg);\n    } else {\n        console.warn(`${LOG_CATEGORY}: ${msg}`);\n    }\n}\nfunction addUniqueItem(arr, item) {\n    if (arr.findIndex((name)=>name === item) === -1) {\n        arr.push(item);\n    }\n    return arr;\n}\nfunction getFMId(remoteInfo) {\n    if (\"version\" in remoteInfo && remoteInfo.version) {\n        return `${remoteInfo.name}:${remoteInfo.version}`;\n    } else if (\"entry\" in remoteInfo && remoteInfo.entry) {\n        return `${remoteInfo.name}:${remoteInfo.entry}`;\n    } else {\n        return `${remoteInfo.name}`;\n    }\n}\nfunction isRemoteInfoWithEntry(remote) {\n    return typeof remote.entry !== \"undefined\";\n}\nfunction isPureRemoteEntry(remote) {\n    return !remote.entry.includes(\".json\") && remote.entry.includes(\".js\");\n}\nfunction isObject(val) {\n    return val && typeof val === \"object\";\n}\nconst objectToString = Object.prototype.toString;\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isPlainObject(val) {\n    return objectToString.call(val) === \"[object Object]\";\n}\nfunction arrayOptions(options) {\n    return Array.isArray(options) ? options : [\n        options\n    ];\n}\nfunction getRemoteEntryInfoFromSnapshot(snapshot) {\n    const defaultRemoteEntryInfo = {\n        url: \"\",\n        type: \"global\",\n        globalName: \"\"\n    };\n    if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)()) {\n        return \"remoteEntry\" in snapshot ? {\n            url: snapshot.remoteEntry,\n            type: snapshot.remoteEntryType,\n            globalName: snapshot.globalName\n        } : defaultRemoteEntryInfo;\n    }\n    if (\"ssrRemoteEntry\" in snapshot) {\n        return {\n            url: snapshot.ssrRemoteEntry || defaultRemoteEntryInfo.url,\n            type: snapshot.ssrRemoteEntryType || defaultRemoteEntryInfo.type,\n            globalName: snapshot.globalName\n        };\n    }\n    return defaultRemoteEntryInfo;\n}\nconst nativeGlobal = (()=>{\n    try {\n        return new Function(\"return this\")();\n    } catch (e) {\n        return globalThis;\n    }\n})();\nconst Global = nativeGlobal;\nfunction definePropertyGlobalVal(target, key, val) {\n    Object.defineProperty(target, key, {\n        value: val,\n        configurable: false,\n        writable: true\n    });\n}\nfunction includeOwnProperty(target, key) {\n    return Object.hasOwnProperty.call(target, key);\n}\n// This section is to prevent encapsulation by certain microfrontend frameworks. Due to reuse policies, sandbox escapes.\n// The sandbox in the microfrontend does not replicate the value of 'configurable'.\n// If there is no loading content on the global object, this section defines the loading object.\nif (!includeOwnProperty(globalThis, \"__GLOBAL_LOADING_REMOTE_ENTRY__\")) {\n    definePropertyGlobalVal(globalThis, \"__GLOBAL_LOADING_REMOTE_ENTRY__\", {});\n}\nconst globalLoading = globalThis.__GLOBAL_LOADING_REMOTE_ENTRY__;\nfunction setGlobalDefaultVal(target) {\n    var _target___FEDERATION__, _target___FEDERATION__1, _target___FEDERATION__2, _target___FEDERATION__3, _target___FEDERATION__4, _target___FEDERATION__5;\n    if (includeOwnProperty(target, \"__VMOK__\") && !includeOwnProperty(target, \"__FEDERATION__\")) {\n        definePropertyGlobalVal(target, \"__FEDERATION__\", target.__VMOK__);\n    }\n    if (!includeOwnProperty(target, \"__FEDERATION__\")) {\n        definePropertyGlobalVal(target, \"__FEDERATION__\", {\n            __GLOBAL_PLUGIN__: [],\n            __INSTANCES__: [],\n            moduleInfo: {},\n            __SHARE__: {},\n            __MANIFEST_LOADING__: {},\n            __PRELOADED_MAP__: new Map()\n        });\n        definePropertyGlobalVal(target, \"__VMOK__\", target.__FEDERATION__);\n    }\n    var ___GLOBAL_PLUGIN__;\n    (___GLOBAL_PLUGIN__ = (_target___FEDERATION__ = target.__FEDERATION__).__GLOBAL_PLUGIN__) != null ? ___GLOBAL_PLUGIN__ : _target___FEDERATION__.__GLOBAL_PLUGIN__ = [];\n    var ___INSTANCES__;\n    (___INSTANCES__ = (_target___FEDERATION__1 = target.__FEDERATION__).__INSTANCES__) != null ? ___INSTANCES__ : _target___FEDERATION__1.__INSTANCES__ = [];\n    var _moduleInfo;\n    (_moduleInfo = (_target___FEDERATION__2 = target.__FEDERATION__).moduleInfo) != null ? _moduleInfo : _target___FEDERATION__2.moduleInfo = {};\n    var ___SHARE__;\n    (___SHARE__ = (_target___FEDERATION__3 = target.__FEDERATION__).__SHARE__) != null ? ___SHARE__ : _target___FEDERATION__3.__SHARE__ = {};\n    var ___MANIFEST_LOADING__;\n    (___MANIFEST_LOADING__ = (_target___FEDERATION__4 = target.__FEDERATION__).__MANIFEST_LOADING__) != null ? ___MANIFEST_LOADING__ : _target___FEDERATION__4.__MANIFEST_LOADING__ = {};\n    var ___PRELOADED_MAP__;\n    (___PRELOADED_MAP__ = (_target___FEDERATION__5 = target.__FEDERATION__).__PRELOADED_MAP__) != null ? ___PRELOADED_MAP__ : _target___FEDERATION__5.__PRELOADED_MAP__ = new Map();\n}\nsetGlobalDefaultVal(globalThis);\nsetGlobalDefaultVal(nativeGlobal);\nfunction resetFederationGlobalInfo() {\n    globalThis.__FEDERATION__.__GLOBAL_PLUGIN__ = [];\n    globalThis.__FEDERATION__.__INSTANCES__ = [];\n    globalThis.__FEDERATION__.moduleInfo = {};\n    globalThis.__FEDERATION__.__SHARE__ = {};\n    globalThis.__FEDERATION__.__MANIFEST_LOADING__ = {};\n}\nfunction getGlobalFederationInstance(name, version) {\n    const buildId = getBuilderId();\n    return globalThis.__FEDERATION__.__INSTANCES__.find((GMInstance)=>{\n        if (buildId && GMInstance.options.id === getBuilderId()) {\n            return true;\n        }\n        if (GMInstance.options.name === name && !GMInstance.options.version && !version) {\n            return true;\n        }\n        if (GMInstance.options.name === name && version && GMInstance.options.version === version) {\n            return true;\n        }\n        return false;\n    });\n}\nfunction setGlobalFederationInstance(FederationInstance) {\n    globalThis.__FEDERATION__.__INSTANCES__.push(FederationInstance);\n}\nfunction getGlobalFederationConstructor() {\n    return globalThis.__FEDERATION__.__DEBUG_CONSTRUCTOR__;\n}\nfunction setGlobalFederationConstructor(FederationConstructor, isDebug = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isDebugMode)()) {\n    if (isDebug) {\n        globalThis.__FEDERATION__.__DEBUG_CONSTRUCTOR__ = FederationConstructor;\n        globalThis.__FEDERATION__.__DEBUG_CONSTRUCTOR_VERSION__ = \"0.6.0\";\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getInfoWithoutType(target, key) {\n    if (typeof key === \"string\") {\n        const keyRes = target[key];\n        if (keyRes) {\n            return {\n                value: target[key],\n                key: key\n            };\n        } else {\n            const targetKeys = Object.keys(target);\n            for (const targetKey of targetKeys){\n                const [targetTypeOrName, _] = targetKey.split(\":\");\n                const nKey = `${targetTypeOrName}:${key}`;\n                const typeWithKeyRes = target[nKey];\n                if (typeWithKeyRes) {\n                    return {\n                        value: typeWithKeyRes,\n                        key: nKey\n                    };\n                }\n            }\n            return {\n                value: undefined,\n                key: key\n            };\n        }\n    } else {\n        throw new Error(\"key must be string\");\n    }\n}\nconst getGlobalSnapshot = ()=>nativeGlobal.__FEDERATION__.moduleInfo;\nconst getTargetSnapshotInfoByModuleInfo = (moduleInfo, snapshot)=>{\n    // Check if the remote is included in the hostSnapshot\n    const moduleKey = getFMId(moduleInfo);\n    const getModuleInfo = getInfoWithoutType(snapshot, moduleKey).value;\n    // The remoteSnapshot might not include a version\n    if (getModuleInfo && !getModuleInfo.version && \"version\" in moduleInfo && moduleInfo[\"version\"]) {\n        getModuleInfo.version = moduleInfo[\"version\"];\n    }\n    if (getModuleInfo) {\n        return getModuleInfo;\n    }\n    // If the remote is not included in the hostSnapshot, deploy a micro app snapshot\n    if (\"version\" in moduleInfo && moduleInfo[\"version\"]) {\n        const { version } = moduleInfo, resModuleInfo = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(moduleInfo, [\n            \"version\"\n        ]);\n        const moduleKeyWithoutVersion = getFMId(resModuleInfo);\n        const getModuleInfoWithoutVersion = getInfoWithoutType(nativeGlobal.__FEDERATION__.moduleInfo, moduleKeyWithoutVersion).value;\n        if ((getModuleInfoWithoutVersion == null ? void 0 : getModuleInfoWithoutVersion.version) === version) {\n            return getModuleInfoWithoutVersion;\n        }\n    }\n    return;\n};\nconst getGlobalSnapshotInfoByModuleInfo = (moduleInfo)=>getTargetSnapshotInfoByModuleInfo(moduleInfo, nativeGlobal.__FEDERATION__.moduleInfo);\nconst setGlobalSnapshotInfoByModuleInfo = (remoteInfo, moduleDetailInfo)=>{\n    const moduleKey = getFMId(remoteInfo);\n    nativeGlobal.__FEDERATION__.moduleInfo[moduleKey] = moduleDetailInfo;\n    return nativeGlobal.__FEDERATION__.moduleInfo;\n};\nconst addGlobalSnapshot = (moduleInfos)=>{\n    nativeGlobal.__FEDERATION__.moduleInfo = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, nativeGlobal.__FEDERATION__.moduleInfo, moduleInfos);\n    return ()=>{\n        const keys = Object.keys(moduleInfos);\n        for (const key of keys){\n            delete nativeGlobal.__FEDERATION__.moduleInfo[key];\n        }\n    };\n};\nconst getRemoteEntryExports = (name, globalName)=>{\n    const remoteEntryKey = globalName || `__FEDERATION_${name}:custom__`;\n    const entryExports = globalThis[remoteEntryKey];\n    return {\n        remoteEntryKey,\n        entryExports\n    };\n};\n// This function is used to register global plugins.\n// It iterates over the provided plugins and checks if they are already registered.\n// If a plugin is not registered, it is added to the global plugins.\n// If a plugin is already registered, a warning message is logged.\nconst registerGlobalPlugins = (plugins)=>{\n    const { __GLOBAL_PLUGIN__ } = nativeGlobal.__FEDERATION__;\n    plugins.forEach((plugin)=>{\n        if (__GLOBAL_PLUGIN__.findIndex((p)=>p.name === plugin.name) === -1) {\n            __GLOBAL_PLUGIN__.push(plugin);\n        } else {\n            warn(`The plugin ${plugin.name} has been registered.`);\n        }\n    });\n};\nconst getGlobalHostPlugins = ()=>nativeGlobal.__FEDERATION__.__GLOBAL_PLUGIN__;\nconst getPreloaded = (id)=>globalThis.__FEDERATION__.__PRELOADED_MAP__.get(id);\nconst setPreloaded = (id)=>globalThis.__FEDERATION__.__PRELOADED_MAP__.set(id, true);\nconst DEFAULT_SCOPE = \"default\";\nconst DEFAULT_REMOTE_TYPE = \"global\";\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// those constants are based on https://www.rubydoc.info/gems/semantic_range/3.0.0/SemanticRange#BUILDIDENTIFIER-constant\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nconst buildIdentifier = \"[0-9A-Za-z-]+\";\nconst build = `(?:\\\\+(${buildIdentifier}(?:\\\\.${buildIdentifier})*))`;\nconst numericIdentifier = \"0|[1-9]\\\\d*\";\nconst numericIdentifierLoose = \"[0-9]+\";\nconst nonNumericIdentifier = \"\\\\d*[a-zA-Z-][a-zA-Z0-9-]*\";\nconst preReleaseIdentifierLoose = `(?:${numericIdentifierLoose}|${nonNumericIdentifier})`;\nconst preReleaseLoose = `(?:-?(${preReleaseIdentifierLoose}(?:\\\\.${preReleaseIdentifierLoose})*))`;\nconst preReleaseIdentifier = `(?:${numericIdentifier}|${nonNumericIdentifier})`;\nconst preRelease = `(?:-(${preReleaseIdentifier}(?:\\\\.${preReleaseIdentifier})*))`;\nconst xRangeIdentifier = `${numericIdentifier}|x|X|\\\\*`;\nconst xRangePlain = `[v=\\\\s]*(${xRangeIdentifier})(?:\\\\.(${xRangeIdentifier})(?:\\\\.(${xRangeIdentifier})(?:${preRelease})?${build}?)?)?`;\nconst hyphenRange = `^\\\\s*(${xRangePlain})\\\\s+-\\\\s+(${xRangePlain})\\\\s*$`;\nconst mainVersionLoose = `(${numericIdentifierLoose})\\\\.(${numericIdentifierLoose})\\\\.(${numericIdentifierLoose})`;\nconst loosePlain = `[v=\\\\s]*${mainVersionLoose}${preReleaseLoose}?${build}?`;\nconst gtlt = \"((?:<|>)?=?)\";\nconst comparatorTrim = `(\\\\s*)${gtlt}\\\\s*(${loosePlain}|${xRangePlain})`;\nconst loneTilde = \"(?:~>?)\";\nconst tildeTrim = `(\\\\s*)${loneTilde}\\\\s+`;\nconst loneCaret = \"(?:\\\\^)\";\nconst caretTrim = `(\\\\s*)${loneCaret}\\\\s+`;\nconst star = \"(<|>)?=?\\\\s*\\\\*\";\nconst caret = `^${loneCaret}${xRangePlain}$`;\nconst mainVersion = `(${numericIdentifier})\\\\.(${numericIdentifier})\\\\.(${numericIdentifier})`;\nconst fullPlain = `v?${mainVersion}${preRelease}?${build}?`;\nconst tilde = `^${loneTilde}${xRangePlain}$`;\nconst xRange = `^${gtlt}\\\\s*${xRangePlain}$`;\nconst comparator = `^${gtlt}\\\\s*(${fullPlain})$|^$`;\n// copy from semver package\nconst gte0 = \"^\\\\s*>=\\\\s*0.0.0\\\\s*$\";\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\nfunction parseRegex(source) {\n    return new RegExp(source);\n}\nfunction isXVersion(version) {\n    return !version || version.toLowerCase() === \"x\" || version === \"*\";\n}\nfunction pipe(...fns) {\n    return (x)=>fns.reduce((v, f)=>f(v), x);\n}\nfunction extractComparator(comparatorString) {\n    return comparatorString.match(parseRegex(comparator));\n}\nfunction combineVersion(major, minor, patch, preRelease) {\n    const mainVersion = `${major}.${minor}.${patch}`;\n    if (preRelease) {\n        return `${mainVersion}-${preRelease}`;\n    }\n    return mainVersion;\n}\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\nfunction parseHyphen(range) {\n    return range.replace(parseRegex(hyphenRange), (_range, from, fromMajor, fromMinor, fromPatch, _fromPreRelease, _fromBuild, to, toMajor, toMinor, toPatch, toPreRelease)=>{\n        if (isXVersion(fromMajor)) {\n            from = \"\";\n        } else if (isXVersion(fromMinor)) {\n            from = `>=${fromMajor}.0.0`;\n        } else if (isXVersion(fromPatch)) {\n            from = `>=${fromMajor}.${fromMinor}.0`;\n        } else {\n            from = `>=${from}`;\n        }\n        if (isXVersion(toMajor)) {\n            to = \"\";\n        } else if (isXVersion(toMinor)) {\n            to = `<${Number(toMajor) + 1}.0.0-0`;\n        } else if (isXVersion(toPatch)) {\n            to = `<${toMajor}.${Number(toMinor) + 1}.0-0`;\n        } else if (toPreRelease) {\n            to = `<=${toMajor}.${toMinor}.${toPatch}-${toPreRelease}`;\n        } else {\n            to = `<=${to}`;\n        }\n        return `${from} ${to}`.trim();\n    });\n}\nfunction parseComparatorTrim(range) {\n    return range.replace(parseRegex(comparatorTrim), \"$1$2$3\");\n}\nfunction parseTildeTrim(range) {\n    return range.replace(parseRegex(tildeTrim), \"$1~\");\n}\nfunction parseCaretTrim(range) {\n    return range.replace(parseRegex(caretTrim), \"$1^\");\n}\nfunction parseCarets(range) {\n    return range.trim().split(/\\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(caret), (_, major, minor, patch, preRelease)=>{\n            if (isXVersion(major)) {\n                return \"\";\n            } else if (isXVersion(minor)) {\n                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;\n            } else if (isXVersion(patch)) {\n                if (major === \"0\") {\n                    return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;\n                } else {\n                    return `>=${major}.${minor}.0 <${Number(major) + 1}.0.0-0`;\n                }\n            } else if (preRelease) {\n                if (major === \"0\") {\n                    if (minor === \"0\") {\n                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${minor}.${Number(patch) + 1}-0`;\n                    } else {\n                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n                    }\n                } else {\n                    return `>=${major}.${minor}.${patch}-${preRelease} <${Number(major) + 1}.0.0-0`;\n                }\n            } else {\n                if (major === \"0\") {\n                    if (minor === \"0\") {\n                        return `>=${major}.${minor}.${patch} <${major}.${minor}.${Number(patch) + 1}-0`;\n                    } else {\n                        return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;\n                    }\n                }\n                return `>=${major}.${minor}.${patch} <${Number(major) + 1}.0.0-0`;\n            }\n        })).join(\" \");\n}\nfunction parseTildes(range) {\n    return range.trim().split(/\\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(tilde), (_, major, minor, patch, preRelease)=>{\n            if (isXVersion(major)) {\n                return \"\";\n            } else if (isXVersion(minor)) {\n                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;\n            } else if (isXVersion(patch)) {\n                return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;\n            } else if (preRelease) {\n                return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n            }\n            return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;\n        })).join(\" \");\n}\nfunction parseXRanges(range) {\n    return range.split(/\\s+/).map((rangeVersion)=>rangeVersion.trim().replace(parseRegex(xRange), (ret, gtlt, major, minor, patch, preRelease)=>{\n            const isXMajor = isXVersion(major);\n            const isXMinor = isXMajor || isXVersion(minor);\n            const isXPatch = isXMinor || isXVersion(patch);\n            if (gtlt === \"=\" && isXPatch) {\n                gtlt = \"\";\n            }\n            preRelease = \"\";\n            if (isXMajor) {\n                if (gtlt === \">\" || gtlt === \"<\") {\n                    // nothing is allowed\n                    return \"<0.0.0-0\";\n                } else {\n                    // nothing is forbidden\n                    return \"*\";\n                }\n            } else if (gtlt && isXPatch) {\n                // replace X with 0\n                if (isXMinor) {\n                    minor = 0;\n                }\n                patch = 0;\n                if (gtlt === \">\") {\n                    // >1 => >=2.0.0\n                    // >1.2 => >=1.3.0\n                    gtlt = \">=\";\n                    if (isXMinor) {\n                        major = Number(major) + 1;\n                        minor = 0;\n                        patch = 0;\n                    } else {\n                        minor = Number(minor) + 1;\n                        patch = 0;\n                    }\n                } else if (gtlt === \"<=\") {\n                    // <=0.7.x is actually <0.8.0, since any 0.7.x should pass\n                    // Similarly, <=7.x is actually <8.0.0, etc.\n                    gtlt = \"<\";\n                    if (isXMinor) {\n                        major = Number(major) + 1;\n                    } else {\n                        minor = Number(minor) + 1;\n                    }\n                }\n                if (gtlt === \"<\") {\n                    preRelease = \"-0\";\n                }\n                return `${gtlt + major}.${minor}.${patch}${preRelease}`;\n            } else if (isXMinor) {\n                return `>=${major}.0.0${preRelease} <${Number(major) + 1}.0.0-0`;\n            } else if (isXPatch) {\n                return `>=${major}.${minor}.0${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n            }\n            return ret;\n        })).join(\" \");\n}\nfunction parseStar(range) {\n    return range.trim().replace(parseRegex(star), \"\");\n}\nfunction parseGTE0(comparatorString) {\n    return comparatorString.trim().replace(parseRegex(gte0), \"\");\n}\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction compareAtom(rangeAtom, versionAtom) {\n    rangeAtom = Number(rangeAtom) || rangeAtom;\n    versionAtom = Number(versionAtom) || versionAtom;\n    if (rangeAtom > versionAtom) {\n        return 1;\n    }\n    if (rangeAtom === versionAtom) {\n        return 0;\n    }\n    return -1;\n}\nfunction comparePreRelease(rangeAtom, versionAtom) {\n    const { preRelease: rangePreRelease } = rangeAtom;\n    const { preRelease: versionPreRelease } = versionAtom;\n    if (rangePreRelease === undefined && Boolean(versionPreRelease)) {\n        return 1;\n    }\n    if (Boolean(rangePreRelease) && versionPreRelease === undefined) {\n        return -1;\n    }\n    if (rangePreRelease === undefined && versionPreRelease === undefined) {\n        return 0;\n    }\n    for(let i = 0, n = rangePreRelease.length; i <= n; i++){\n        const rangeElement = rangePreRelease[i];\n        const versionElement = versionPreRelease[i];\n        if (rangeElement === versionElement) {\n            continue;\n        }\n        if (rangeElement === undefined && versionElement === undefined) {\n            return 0;\n        }\n        if (!rangeElement) {\n            return 1;\n        }\n        if (!versionElement) {\n            return -1;\n        }\n        return compareAtom(rangeElement, versionElement);\n    }\n    return 0;\n}\nfunction compareVersion(rangeAtom, versionAtom) {\n    return compareAtom(rangeAtom.major, versionAtom.major) || compareAtom(rangeAtom.minor, versionAtom.minor) || compareAtom(rangeAtom.patch, versionAtom.patch) || comparePreRelease(rangeAtom, versionAtom);\n}\nfunction eq(rangeAtom, versionAtom) {\n    return rangeAtom.version === versionAtom.version;\n}\nfunction compare(rangeAtom, versionAtom) {\n    switch(rangeAtom.operator){\n        case \"\":\n        case \"=\":\n            return eq(rangeAtom, versionAtom);\n        case \">\":\n            return compareVersion(rangeAtom, versionAtom) < 0;\n        case \">=\":\n            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) < 0;\n        case \"<\":\n            return compareVersion(rangeAtom, versionAtom) > 0;\n        case \"<=\":\n            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) > 0;\n        case undefined:\n            {\n                // mean * or x -> all versions\n                return true;\n            }\n        default:\n            return false;\n    }\n}\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\nfunction parseComparatorString(range) {\n    return pipe(// ^ --> * (any, kinda silly)\n    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n    // ^1.2.3 --> >=1.2.3 <2.0.0-0\n    // ^1.2.0 --> >=1.2.0 <2.0.0-0\n    parseCarets, // ~, ~> --> * (any, kinda silly)\n    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n    parseTildes, parseXRanges, parseStar)(range);\n}\nfunction parseRange(range) {\n    return pipe(// `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    parseHyphen, // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    parseComparatorTrim, // `~ 1.2.3` => `~1.2.3`\n    parseTildeTrim, // `^ 1.2.3` => `^1.2.3`\n    parseCaretTrim)(range.trim()).split(/\\s+/).join(\" \");\n}\nfunction satisfy(version, range) {\n    if (!version) {\n        return false;\n    }\n    const parsedRange = parseRange(range);\n    const parsedComparator = parsedRange.split(\" \").map((rangeVersion)=>parseComparatorString(rangeVersion)).join(\" \");\n    const comparators = parsedComparator.split(/\\s+/).map((comparator)=>parseGTE0(comparator));\n    const extractedVersion = extractComparator(version);\n    if (!extractedVersion) {\n        return false;\n    }\n    const [, versionOperator, , versionMajor, versionMinor, versionPatch, versionPreRelease] = extractedVersion;\n    const versionAtom = {\n        operator: versionOperator,\n        version: combineVersion(versionMajor, versionMinor, versionPatch, versionPreRelease),\n        major: versionMajor,\n        minor: versionMinor,\n        patch: versionPatch,\n        preRelease: versionPreRelease == null ? void 0 : versionPreRelease.split(\".\")\n    };\n    for (const comparator of comparators){\n        const extractedComparator = extractComparator(comparator);\n        if (!extractedComparator) {\n            return false;\n        }\n        const [, rangeOperator, , rangeMajor, rangeMinor, rangePatch, rangePreRelease] = extractedComparator;\n        const rangeAtom = {\n            operator: rangeOperator,\n            version: combineVersion(rangeMajor, rangeMinor, rangePatch, rangePreRelease),\n            major: rangeMajor,\n            minor: rangeMinor,\n            patch: rangePatch,\n            preRelease: rangePreRelease == null ? void 0 : rangePreRelease.split(\".\")\n        };\n        if (!compare(rangeAtom, versionAtom)) {\n            return false; // early return\n        }\n    }\n    return true;\n}\nfunction formatShare(shareArgs, from, name, shareStrategy) {\n    let get;\n    if (\"get\" in shareArgs) {\n        // eslint-disable-next-line prefer-destructuring\n        get = shareArgs.get;\n    } else if (\"lib\" in shareArgs) {\n        get = ()=>Promise.resolve(shareArgs.lib);\n    } else {\n        get = ()=>Promise.resolve(()=>{\n                throw new Error(`Can not get shared '${name}'!`);\n            });\n    }\n    if (shareArgs.strategy) {\n        warn(`\"shared.strategy is deprecated, please set in initOptions.shareStrategy instead!\"`);\n    }\n    var _shareArgs_version, _shareArgs_scope, _shareArgs_strategy;\n    return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n        deps: [],\n        useIn: [],\n        from,\n        loading: null\n    }, shareArgs, {\n        shareConfig: (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n            requiredVersion: `^${shareArgs.version}`,\n            singleton: false,\n            eager: false,\n            strictVersion: false\n        }, shareArgs.shareConfig),\n        get,\n        loaded: (shareArgs == null ? void 0 : shareArgs.loaded) || \"lib\" in shareArgs ? true : undefined,\n        version: (_shareArgs_version = shareArgs.version) != null ? _shareArgs_version : \"0\",\n        scope: Array.isArray(shareArgs.scope) ? shareArgs.scope : [\n            (_shareArgs_scope = shareArgs.scope) != null ? _shareArgs_scope : \"default\"\n        ],\n        strategy: ((_shareArgs_strategy = shareArgs.strategy) != null ? _shareArgs_strategy : shareStrategy) || \"version-first\"\n    });\n}\nfunction formatShareConfigs(globalOptions, userOptions) {\n    const shareArgs = userOptions.shared || {};\n    const from = userOptions.name;\n    const shareInfos = Object.keys(shareArgs).reduce((res, pkgName)=>{\n        const arrayShareArgs = arrayOptions(shareArgs[pkgName]);\n        res[pkgName] = res[pkgName] || [];\n        arrayShareArgs.forEach((shareConfig)=>{\n            res[pkgName].push(formatShare(shareConfig, from, pkgName, userOptions.shareStrategy));\n        });\n        return res;\n    }, {});\n    const shared = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, globalOptions.shared);\n    Object.keys(shareInfos).forEach((shareKey)=>{\n        if (!shared[shareKey]) {\n            shared[shareKey] = shareInfos[shareKey];\n        } else {\n            shareInfos[shareKey].forEach((newUserSharedOptions)=>{\n                const isSameVersion = shared[shareKey].find((sharedVal)=>sharedVal.version === newUserSharedOptions.version);\n                if (!isSameVersion) {\n                    shared[shareKey].push(newUserSharedOptions);\n                }\n            });\n        }\n    });\n    return {\n        shared,\n        shareInfos\n    };\n}\nfunction versionLt(a, b) {\n    const transformInvalidVersion = (version)=>{\n        const isNumberVersion = !Number.isNaN(Number(version));\n        if (isNumberVersion) {\n            const splitArr = version.split(\".\");\n            let validVersion = version;\n            for(let i = 0; i < 3 - splitArr.length; i++){\n                validVersion += \".0\";\n            }\n            return validVersion;\n        }\n        return version;\n    };\n    if (satisfy(transformInvalidVersion(a), `<=${transformInvalidVersion(b)}`)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconst findVersion = (shareVersionMap, cb)=>{\n    const callback = cb || function(prev, cur) {\n        return versionLt(prev, cur);\n    };\n    return Object.keys(shareVersionMap).reduce((prev, cur)=>{\n        if (!prev) {\n            return cur;\n        }\n        if (callback(prev, cur)) {\n            return cur;\n        }\n        // default version is '0' https://github.com/webpack/webpack/blob/main/lib/sharing/ProvideSharedModule.js#L136\n        if (prev === \"0\") {\n            return cur;\n        }\n        return prev;\n    }, 0);\n};\nconst isLoaded = (shared)=>{\n    return Boolean(shared.loaded) || typeof shared.lib === \"function\";\n};\nfunction findSingletonVersionOrderByVersion(shareScopeMap, scope, pkgName) {\n    const versions = shareScopeMap[scope][pkgName];\n    const callback = function(prev, cur) {\n        return !isLoaded(versions[prev]) && versionLt(prev, cur);\n    };\n    return findVersion(shareScopeMap[scope][pkgName], callback);\n}\nfunction findSingletonVersionOrderByLoaded(shareScopeMap, scope, pkgName) {\n    const versions = shareScopeMap[scope][pkgName];\n    const callback = function(prev, cur) {\n        if (isLoaded(versions[cur])) {\n            if (isLoaded(versions[prev])) {\n                return Boolean(versionLt(prev, cur));\n            } else {\n                return true;\n            }\n        }\n        if (isLoaded(versions[prev])) {\n            return false;\n        }\n        return versionLt(prev, cur);\n    };\n    return findVersion(shareScopeMap[scope][pkgName], callback);\n}\nfunction getFindShareFunction(strategy) {\n    if (strategy === \"loaded-first\") {\n        return findSingletonVersionOrderByLoaded;\n    }\n    return findSingletonVersionOrderByVersion;\n}\nfunction getRegisteredShare(localShareScopeMap, pkgName, shareInfo, resolveShare) {\n    if (!localShareScopeMap) {\n        return;\n    }\n    const { shareConfig, scope = DEFAULT_SCOPE, strategy } = shareInfo;\n    const scopes = Array.isArray(scope) ? scope : [\n        scope\n    ];\n    for (const sc of scopes){\n        if (shareConfig && localShareScopeMap[sc] && localShareScopeMap[sc][pkgName]) {\n            const { requiredVersion } = shareConfig;\n            const findShareFunction = getFindShareFunction(strategy);\n            const maxOrSingletonVersion = findShareFunction(localShareScopeMap, sc, pkgName);\n            //@ts-ignore\n            const defaultResolver = ()=>{\n                if (shareConfig.singleton) {\n                    if (typeof requiredVersion === \"string\" && !satisfy(maxOrSingletonVersion, requiredVersion)) {\n                        const msg = `Version ${maxOrSingletonVersion} from ${maxOrSingletonVersion && localShareScopeMap[sc][pkgName][maxOrSingletonVersion].from} of shared singleton module ${pkgName} does not satisfy the requirement of ${shareInfo.from} which needs ${requiredVersion})`;\n                        if (shareConfig.strictVersion) {\n                            error(msg);\n                        } else {\n                            warn(msg);\n                        }\n                    }\n                    return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                } else {\n                    if (requiredVersion === false || requiredVersion === \"*\") {\n                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                    }\n                    if (satisfy(maxOrSingletonVersion, requiredVersion)) {\n                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                    }\n                    for (const [versionKey, versionValue] of Object.entries(localShareScopeMap[sc][pkgName])){\n                        if (satisfy(versionKey, requiredVersion)) {\n                            return versionValue;\n                        }\n                    }\n                }\n            };\n            const params = {\n                shareScopeMap: localShareScopeMap,\n                scope: sc,\n                pkgName,\n                version: maxOrSingletonVersion,\n                GlobalFederation: Global.__FEDERATION__,\n                resolver: defaultResolver\n            };\n            const resolveShared = resolveShare.emit(params) || params;\n            return resolveShared.resolver();\n        }\n    }\n}\nfunction getGlobalShareScope() {\n    return Global.__FEDERATION__.__SHARE__;\n}\nfunction getTargetSharedOptions(options) {\n    const { pkgName, extraOptions, shareInfos } = options;\n    const defaultResolver = (sharedOptions)=>{\n        if (!sharedOptions) {\n            return undefined;\n        }\n        const shareVersionMap = {};\n        sharedOptions.forEach((shared)=>{\n            shareVersionMap[shared.version] = shared;\n        });\n        const callback = function(prev, cur) {\n            return !isLoaded(shareVersionMap[prev]) && versionLt(prev, cur);\n        };\n        const maxVersion = findVersion(shareVersionMap, callback);\n        return shareVersionMap[maxVersion];\n    };\n    var _extraOptions_resolver;\n    const resolver = (_extraOptions_resolver = extraOptions == null ? void 0 : extraOptions.resolver) != null ? _extraOptions_resolver : defaultResolver;\n    return Object.assign({}, resolver(shareInfos[pkgName]), extraOptions == null ? void 0 : extraOptions.customShareInfo);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/runtime/dist/share.esm.js\n");

/***/ }),

/***/ "../../packages/sdk/dist/index.esm.js":
/*!********************************************!*\
  !*** ../../packages/sdk/dist/index.esm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BROWSER_LOG_KEY: () => (/* binding */ BROWSER_LOG_KEY),\n/* harmony export */   BROWSER_LOG_VALUE: () => (/* binding */ BROWSER_LOG_VALUE),\n/* harmony export */   ENCODE_NAME_PREFIX: () => (/* binding */ ENCODE_NAME_PREFIX),\n/* harmony export */   EncodedNameTransformMap: () => (/* binding */ EncodedNameTransformMap),\n/* harmony export */   FederationModuleManifest: () => (/* binding */ FederationModuleManifest),\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   MANIFEST_EXT: () => (/* binding */ MANIFEST_EXT),\n/* harmony export */   MFModuleType: () => (/* binding */ MFModuleType),\n/* harmony export */   MODULE_DEVTOOL_IDENTIFIER: () => (/* binding */ MODULE_DEVTOOL_IDENTIFIER),\n/* harmony export */   ManifestFileName: () => (/* binding */ ManifestFileName),\n/* harmony export */   NameTransformMap: () => (/* binding */ NameTransformMap),\n/* harmony export */   NameTransformSymbol: () => (/* binding */ NameTransformSymbol),\n/* harmony export */   SEPARATOR: () => (/* binding */ SEPARATOR),\n/* harmony export */   StatsFileName: () => (/* binding */ StatsFileName),\n/* harmony export */   TEMP_DIR: () => (/* binding */ TEMP_DIR),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   composeKeyWithSeparator: () => (/* binding */ composeKeyWithSeparator),\n/* harmony export */   containerPlugin: () => (/* binding */ ContainerPlugin),\n/* harmony export */   containerReferencePlugin: () => (/* binding */ ContainerReferencePlugin),\n/* harmony export */   createLink: () => (/* binding */ createLink),\n/* harmony export */   createScript: () => (/* binding */ createScript),\n/* harmony export */   createScriptNode: () => (/* binding */ createScriptNode),\n/* harmony export */   decodeName: () => (/* binding */ decodeName),\n/* harmony export */   encodeName: () => (/* binding */ encodeName),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   generateExposeFilename: () => (/* binding */ generateExposeFilename),\n/* harmony export */   generateShareFilename: () => (/* binding */ generateShareFilename),\n/* harmony export */   generateSnapshotFromManifest: () => (/* binding */ generateSnapshotFromManifest),\n/* harmony export */   getProcessEnv: () => (/* binding */ getProcessEnv),\n/* harmony export */   getResourceUrl: () => (/* binding */ getResourceUrl),\n/* harmony export */   inferAutoPublicPath: () => (/* binding */ inferAutoPublicPath),\n/* harmony export */   isBrowserEnv: () => (/* binding */ isBrowserEnv),\n/* harmony export */   isDebugMode: () => (/* binding */ isDebugMode),\n/* harmony export */   isManifestProvider: () => (/* binding */ isManifestProvider),\n/* harmony export */   isStaticResourcesEqual: () => (/* binding */ isStaticResourcesEqual),\n/* harmony export */   loadScript: () => (/* binding */ loadScript),\n/* harmony export */   loadScriptNode: () => (/* binding */ loadScriptNode),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   moduleFederationPlugin: () => (/* binding */ ModuleFederationPlugin),\n/* harmony export */   normalizeOptions: () => (/* binding */ normalizeOptions),\n/* harmony export */   parseEntry: () => (/* binding */ parseEntry),\n/* harmony export */   safeToString: () => (/* binding */ safeToString),\n/* harmony export */   safeWrapper: () => (/* binding */ safeWrapper),\n/* harmony export */   sharePlugin: () => (/* binding */ SharePlugin),\n/* harmony export */   simpleJoinRemoteEntry: () => (/* binding */ simpleJoinRemoteEntry),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var _polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills.esm.js */ \"../../packages/sdk/dist/polyfills.esm.js\");\n\nconst FederationModuleManifest = \"federation-manifest.json\";\nconst MANIFEST_EXT = \".json\";\nconst BROWSER_LOG_KEY = \"FEDERATION_DEBUG\";\nconst BROWSER_LOG_VALUE = \"1\";\nconst NameTransformSymbol = {\n    AT: \"@\",\n    HYPHEN: \"-\",\n    SLASH: \"/\"\n};\nconst NameTransformMap = {\n    [NameTransformSymbol.AT]: \"scope_\",\n    [NameTransformSymbol.HYPHEN]: \"_\",\n    [NameTransformSymbol.SLASH]: \"__\"\n};\nconst EncodedNameTransformMap = {\n    [NameTransformMap[NameTransformSymbol.AT]]: NameTransformSymbol.AT,\n    [NameTransformMap[NameTransformSymbol.HYPHEN]]: NameTransformSymbol.HYPHEN,\n    [NameTransformMap[NameTransformSymbol.SLASH]]: NameTransformSymbol.SLASH\n};\nconst SEPARATOR = \":\";\nconst ManifestFileName = \"mf-manifest.json\";\nconst StatsFileName = \"mf-stats.json\";\nconst MFModuleType = {\n    NPM: \"npm\",\n    APP: \"app\"\n};\nconst MODULE_DEVTOOL_IDENTIFIER = \"__MF_DEVTOOLS_MODULE_INFO__\";\nconst ENCODE_NAME_PREFIX = \"ENCODE_NAME_PREFIX\";\nconst TEMP_DIR = \".federation\";\nvar ContainerPlugin = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nvar ContainerReferencePlugin = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nvar ModuleFederationPlugin = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nvar SharePlugin = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nfunction isBrowserEnv() {\n    return \"undefined\" !== \"undefined\";\n}\nfunction isDebugMode() {\n    if (typeof process !== \"undefined\" && process.env && process.env[\"FEDERATION_DEBUG\"]) {\n        return Boolean(process.env[\"FEDERATION_DEBUG\"]);\n    }\n    return typeof FEDERATION_DEBUG !== \"undefined\" && Boolean(FEDERATION_DEBUG);\n}\nconst getProcessEnv = function() {\n    return typeof process !== \"undefined\" && process.env ? process.env : {};\n};\nconst DEBUG_LOG = \"[ FEDERATION DEBUG ]\";\nfunction safeGetLocalStorageItem() {\n    try {\n        if (false) {}\n    } catch (error) {\n        return typeof document !== \"undefined\";\n    }\n    return false;\n}\nlet Logger = class Logger {\n    info(msg, info) {\n        if (this.enable) {\n            const argsToString = safeToString(info) || \"\";\n            if (isBrowserEnv()) {\n                console.info(`%c ${this.identifier}: ${msg} ${argsToString}`, \"color:#3300CC\");\n            } else {\n                console.info(\"\\x1b[34m%s\", `${this.identifier}: ${msg} ${argsToString ? `\\n${argsToString}` : \"\"}`);\n            }\n        }\n    }\n    logOriginalInfo(...args) {\n        if (this.enable) {\n            if (isBrowserEnv()) {\n                console.info(`%c ${this.identifier}: OriginalInfo`, \"color:#3300CC\");\n                console.log(...args);\n            } else {\n                console.info(`%c ${this.identifier}: OriginalInfo`, \"color:#3300CC\");\n                console.log(...args);\n            }\n        }\n    }\n    constructor(identifier){\n        this.enable = false;\n        this.identifier = identifier || DEBUG_LOG;\n        if (isBrowserEnv() && safeGetLocalStorageItem()) {\n            this.enable = true;\n        } else if (isDebugMode()) {\n            this.enable = true;\n        }\n    }\n};\nconst LOG_CATEGORY = \"[ Federation Runtime ]\";\n// entry: name:version   version : 1.0.0 | ^1.2.3\n// entry: name:entry  entry:  https://localhost:9000/federation-manifest.json\nconst parseEntry = (str, devVerOrUrl, separator = SEPARATOR)=>{\n    const strSplit = str.split(separator);\n    const devVersionOrUrl = getProcessEnv()[\"NODE_ENV\"] === \"development\" && devVerOrUrl;\n    const defaultVersion = \"*\";\n    const isEntry = (s)=>s.startsWith(\"http\") || s.includes(MANIFEST_EXT);\n    // Check if the string starts with a type\n    if (strSplit.length >= 2) {\n        let [name, ...versionOrEntryArr] = strSplit;\n        if (str.startsWith(separator)) {\n            versionOrEntryArr = [\n                devVersionOrUrl || strSplit.slice(-1)[0]\n            ];\n            name = strSplit.slice(0, -1).join(separator);\n        }\n        let versionOrEntry = devVersionOrUrl || versionOrEntryArr.join(separator);\n        if (isEntry(versionOrEntry)) {\n            return {\n                name,\n                entry: versionOrEntry\n            };\n        } else {\n            // Apply version rule\n            // devVersionOrUrl => inputVersion => defaultVersion\n            return {\n                name,\n                version: versionOrEntry || defaultVersion\n            };\n        }\n    } else if (strSplit.length === 1) {\n        const [name] = strSplit;\n        if (devVersionOrUrl && isEntry(devVersionOrUrl)) {\n            return {\n                name,\n                entry: devVersionOrUrl\n            };\n        }\n        return {\n            name,\n            version: devVersionOrUrl || defaultVersion\n        };\n    } else {\n        throw `Invalid entry value: ${str}`;\n    }\n};\nconst logger = new Logger();\nconst composeKeyWithSeparator = function(...args) {\n    if (!args.length) {\n        return \"\";\n    }\n    return args.reduce((sum, cur)=>{\n        if (!cur) {\n            return sum;\n        }\n        if (!sum) {\n            return cur;\n        }\n        return `${sum}${SEPARATOR}${cur}`;\n    }, \"\");\n};\nconst encodeName = function(name, prefix = \"\", withExt = false) {\n    try {\n        const ext = withExt ? \".js\" : \"\";\n        return `${prefix}${name.replace(new RegExp(`${NameTransformSymbol.AT}`, \"g\"), NameTransformMap[NameTransformSymbol.AT]).replace(new RegExp(`${NameTransformSymbol.HYPHEN}`, \"g\"), NameTransformMap[NameTransformSymbol.HYPHEN]).replace(new RegExp(`${NameTransformSymbol.SLASH}`, \"g\"), NameTransformMap[NameTransformSymbol.SLASH])}${ext}`;\n    } catch (err) {\n        throw err;\n    }\n};\nconst decodeName = function(name, prefix, withExt) {\n    try {\n        let decodedName = name;\n        if (prefix) {\n            if (!decodedName.startsWith(prefix)) {\n                return decodedName;\n            }\n            decodedName = decodedName.replace(new RegExp(prefix, \"g\"), \"\");\n        }\n        decodedName = decodedName.replace(new RegExp(`${NameTransformMap[NameTransformSymbol.AT]}`, \"g\"), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.SLASH]}`, \"g\"), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.HYPHEN]}`, \"g\"), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]);\n        if (withExt) {\n            decodedName = decodedName.replace(\".js\", \"\");\n        }\n        return decodedName;\n    } catch (err) {\n        throw err;\n    }\n};\nconst generateExposeFilename = (exposeName, withExt)=>{\n    if (!exposeName) {\n        return \"\";\n    }\n    let expose = exposeName;\n    if (expose === \".\") {\n        expose = \"default_export\";\n    }\n    if (expose.startsWith(\"./\")) {\n        expose = expose.replace(\"./\", \"\");\n    }\n    return encodeName(expose, \"__federation_expose_\", withExt);\n};\nconst generateShareFilename = (pkgName, withExt)=>{\n    if (!pkgName) {\n        return \"\";\n    }\n    return encodeName(pkgName, \"__federation_shared_\", withExt);\n};\nconst getResourceUrl = (module, sourceUrl)=>{\n    if (\"getPublicPath\" in module) {\n        let publicPath;\n        if (!module.getPublicPath.startsWith(\"function\")) {\n            publicPath = new Function(module.getPublicPath)();\n        } else {\n            publicPath = new Function(\"return \" + module.getPublicPath)()();\n        }\n        return `${publicPath}${sourceUrl}`;\n    } else if (\"publicPath\" in module) {\n        return `${module.publicPath}${sourceUrl}`;\n    } else {\n        console.warn(\"Cannot get resource URL. If in debug mode, please ignore.\", module, sourceUrl);\n        return \"\";\n    }\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst assert = (condition, msg)=>{\n    if (!condition) {\n        error(msg);\n    }\n};\nconst error = (msg)=>{\n    throw new Error(`${LOG_CATEGORY}: ${msg}`);\n};\nconst warn = (msg)=>{\n    console.warn(`${LOG_CATEGORY}: ${msg}`);\n};\nfunction safeToString(info) {\n    try {\n        return JSON.stringify(info, null, 2);\n    } catch (e) {\n        return \"\";\n    }\n}\nconst simpleJoinRemoteEntry = (rPath, rName)=>{\n    if (!rPath) {\n        return rName;\n    }\n    const transformPath = (str)=>{\n        if (str === \".\") {\n            return \"\";\n        }\n        if (str.startsWith(\"./\")) {\n            return str.replace(\"./\", \"\");\n        }\n        if (str.startsWith(\"/\")) {\n            const strWithoutSlash = str.slice(1);\n            if (strWithoutSlash.endsWith(\"/\")) {\n                return strWithoutSlash.slice(0, -1);\n            }\n            return strWithoutSlash;\n        }\n        return str;\n    };\n    const transformedPath = transformPath(rPath);\n    if (!transformedPath) {\n        return rName;\n    }\n    if (transformedPath.endsWith(\"/\")) {\n        return `${transformedPath}${rName}`;\n    }\n    return `${transformedPath}/${rName}`;\n};\nfunction inferAutoPublicPath(url) {\n    return url.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n}\n// Priority: overrides > remotes\n// eslint-disable-next-line max-lines-per-function\nfunction generateSnapshotFromManifest(manifest, options = {}) {\n    var _manifest_metaData, _manifest_metaData1;\n    const { remotes = {}, overrides = {}, version } = options;\n    let remoteSnapshot;\n    const getPublicPath = ()=>{\n        if (\"publicPath\" in manifest.metaData) {\n            if (manifest.metaData.publicPath === \"auto\" && version) {\n                // use same implementation as publicPath auto runtime module implements\n                return inferAutoPublicPath(version);\n            }\n            return manifest.metaData.publicPath;\n        } else {\n            return manifest.metaData.getPublicPath;\n        }\n    };\n    const overridesKeys = Object.keys(overrides);\n    let remotesInfo = {};\n    // If remotes are not provided, only the remotes in the manifest will be read\n    if (!Object.keys(remotes).length) {\n        var _manifest_remotes;\n        remotesInfo = ((_manifest_remotes = manifest.remotes) == null ? void 0 : _manifest_remotes.reduce((res, next)=>{\n            let matchedVersion;\n            const name = next.federationContainerName;\n            // overrides have higher priority\n            if (overridesKeys.includes(name)) {\n                matchedVersion = overrides[name];\n            } else {\n                if (\"version\" in next) {\n                    matchedVersion = next.version;\n                } else {\n                    matchedVersion = next.entry;\n                }\n            }\n            res[name] = {\n                matchedVersion\n            };\n            return res;\n        }, {})) || {};\n    }\n    // If remotes (deploy scenario) are specified, they need to be traversed again\n    Object.keys(remotes).forEach((key)=>remotesInfo[key] = {\n            // overrides will override dependencies\n            matchedVersion: overridesKeys.includes(key) ? overrides[key] : remotes[key]\n        });\n    const { remoteEntry: { path: remoteEntryPath, name: remoteEntryName, type: remoteEntryType }, types: remoteTypes, buildInfo: { buildVersion }, globalName, ssrRemoteEntry } = manifest.metaData;\n    const { exposes } = manifest;\n    let basicRemoteSnapshot = {\n        version: version ? version : \"\",\n        buildVersion,\n        globalName,\n        remoteEntry: simpleJoinRemoteEntry(remoteEntryPath, remoteEntryName),\n        remoteEntryType,\n        remoteTypes: simpleJoinRemoteEntry(remoteTypes.path, remoteTypes.name),\n        remoteTypesZip: remoteTypes.zip || \"\",\n        remoteTypesAPI: remoteTypes.api || \"\",\n        remotesInfo,\n        shared: manifest == null ? void 0 : manifest.shared.map((item)=>({\n                assets: item.assets,\n                sharedName: item.name,\n                version: item.version\n            })),\n        modules: exposes == null ? void 0 : exposes.map((expose)=>({\n                moduleName: expose.name,\n                modulePath: expose.path,\n                assets: expose.assets\n            }))\n    };\n    if ((_manifest_metaData = manifest.metaData) == null ? void 0 : _manifest_metaData.prefetchInterface) {\n        const prefetchInterface = manifest.metaData.prefetchInterface;\n        basicRemoteSnapshot = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, basicRemoteSnapshot, {\n            prefetchInterface\n        });\n    }\n    if ((_manifest_metaData1 = manifest.metaData) == null ? void 0 : _manifest_metaData1.prefetchEntry) {\n        const { path, name, type } = manifest.metaData.prefetchEntry;\n        basicRemoteSnapshot = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, basicRemoteSnapshot, {\n            prefetchEntry: simpleJoinRemoteEntry(path, name),\n            prefetchEntryType: type\n        });\n    }\n    if (\"publicPath\" in manifest.metaData) {\n        remoteSnapshot = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, basicRemoteSnapshot, {\n            publicPath: getPublicPath()\n        });\n    } else {\n        remoteSnapshot = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, basicRemoteSnapshot, {\n            getPublicPath: getPublicPath()\n        });\n    }\n    if (ssrRemoteEntry) {\n        const fullSSRRemoteEntry = simpleJoinRemoteEntry(ssrRemoteEntry.path, ssrRemoteEntry.name);\n        remoteSnapshot.ssrRemoteEntry = fullSSRRemoteEntry;\n        remoteSnapshot.ssrRemoteEntryType = \"commonjs-module\";\n    }\n    return remoteSnapshot;\n}\nfunction isManifestProvider(moduleInfo) {\n    if (\"remoteEntry\" in moduleInfo && moduleInfo.remoteEntry.includes(MANIFEST_EXT)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function safeWrapper(callback, disableWarn) {\n    try {\n        const res = await callback();\n        return res;\n    } catch (e) {\n        !disableWarn && warn(e);\n        return;\n    }\n}\nfunction isStaticResourcesEqual(url1, url2) {\n    const REG_EXP = /^(https?:)?\\/\\//i;\n    // Transform url1 and url2 into relative paths\n    const relativeUrl1 = url1.replace(REG_EXP, \"\").replace(/\\/$/, \"\");\n    const relativeUrl2 = url2.replace(REG_EXP, \"\").replace(/\\/$/, \"\");\n    // Check if the relative paths are identical\n    return relativeUrl1 === relativeUrl2;\n}\nfunction createScript(info) {\n    // Retrieve the existing script element by its src attribute\n    let script = null;\n    let needAttach = true;\n    let timeout = 20000;\n    let timeoutId;\n    const scripts = document.getElementsByTagName(\"script\");\n    for(let i = 0; i < scripts.length; i++){\n        const s = scripts[i];\n        const scriptSrc = s.getAttribute(\"src\");\n        if (scriptSrc && isStaticResourcesEqual(scriptSrc, info.url)) {\n            script = s;\n            needAttach = false;\n            break;\n        }\n    }\n    if (!script) {\n        script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = info.url;\n        let createScriptRes = undefined;\n        if (info.createScriptHook) {\n            createScriptRes = info.createScriptHook(info.url, info.attrs);\n            if (createScriptRes instanceof HTMLScriptElement) {\n                script = createScriptRes;\n            } else if (typeof createScriptRes === \"object\") {\n                if (\"script\" in createScriptRes && createScriptRes.script) {\n                    script = createScriptRes.script;\n                }\n                if (\"timeout\" in createScriptRes && createScriptRes.timeout) {\n                    timeout = createScriptRes.timeout;\n                }\n            }\n        }\n        const attrs = info.attrs;\n        if (attrs && !createScriptRes) {\n            Object.keys(attrs).forEach((name)=>{\n                if (script) {\n                    if (name === \"async\" || name === \"defer\") {\n                        script[name] = attrs[name];\n                    // Attributes that do not exist are considered overridden\n                    } else if (!script.getAttribute(name)) {\n                        script.setAttribute(name, attrs[name]);\n                    }\n                }\n            });\n        }\n    }\n    const onScriptComplete = async (prev, event)=>{\n        var _info_cb;\n        clearTimeout(timeoutId);\n        // Prevent memory leaks in IE.\n        if (script) {\n            script.onerror = null;\n            script.onload = null;\n            safeWrapper(()=>{\n                const { needDeleteScript = true } = info;\n                if (needDeleteScript) {\n                    (script == null ? void 0 : script.parentNode) && script.parentNode.removeChild(script);\n                }\n            });\n            if (prev && typeof prev === \"function\") {\n                var _info_cb1;\n                const result = prev(event);\n                if (result instanceof Promise) {\n                    var _info_cb2;\n                    const res = await result;\n                    info == null ? void 0 : (_info_cb2 = info.cb) == null ? void 0 : _info_cb2.call(info);\n                    return res;\n                }\n                info == null ? void 0 : (_info_cb1 = info.cb) == null ? void 0 : _info_cb1.call(info);\n                return result;\n            }\n        }\n        info == null ? void 0 : (_info_cb = info.cb) == null ? void 0 : _info_cb.call(info);\n    };\n    script.onerror = onScriptComplete.bind(null, script.onerror);\n    script.onload = onScriptComplete.bind(null, script.onload);\n    timeoutId = setTimeout(()=>{\n        onScriptComplete(null, new Error(`Remote script \"${info.url}\" time-outed.`));\n    }, timeout);\n    return {\n        script,\n        needAttach\n    };\n}\nfunction createLink(info) {\n    // <link rel=\"preload\" href=\"script.js\" as=\"script\">\n    // Retrieve the existing script element by its src attribute\n    let link = null;\n    let needAttach = true;\n    const links = document.getElementsByTagName(\"link\");\n    for(let i = 0; i < links.length; i++){\n        const l = links[i];\n        const linkHref = l.getAttribute(\"href\");\n        const linkRef = l.getAttribute(\"ref\");\n        if (linkHref && isStaticResourcesEqual(linkHref, info.url) && linkRef === info.attrs[\"ref\"]) {\n            link = l;\n            needAttach = false;\n            break;\n        }\n    }\n    if (!link) {\n        link = document.createElement(\"link\");\n        link.setAttribute(\"href\", info.url);\n        let createLinkRes = undefined;\n        const attrs = info.attrs;\n        if (info.createLinkHook) {\n            createLinkRes = info.createLinkHook(info.url, attrs);\n            if (createLinkRes instanceof HTMLLinkElement) {\n                link = createLinkRes;\n            }\n        }\n        if (attrs && !createLinkRes) {\n            Object.keys(attrs).forEach((name)=>{\n                if (link && !link.getAttribute(name)) {\n                    link.setAttribute(name, attrs[name]);\n                }\n            });\n        }\n    }\n    const onLinkComplete = (prev, event)=>{\n        // Prevent memory leaks in IE.\n        if (link) {\n            link.onerror = null;\n            link.onload = null;\n            safeWrapper(()=>{\n                const { needDeleteLink = true } = info;\n                if (needDeleteLink) {\n                    (link == null ? void 0 : link.parentNode) && link.parentNode.removeChild(link);\n                }\n            });\n            if (prev) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const res = prev(event);\n                info.cb();\n                return res;\n            }\n        }\n        info.cb();\n    };\n    link.onerror = onLinkComplete.bind(null, link.onerror);\n    link.onload = onLinkComplete.bind(null, link.onload);\n    return {\n        link,\n        needAttach\n    };\n}\nfunction loadScript(url, info) {\n    const { attrs = {}, createScriptHook } = info;\n    return new Promise((resolve, _reject)=>{\n        const { script, needAttach } = createScript({\n            url,\n            cb: resolve,\n            attrs: (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                fetchpriority: \"high\"\n            }, attrs),\n            createScriptHook,\n            needDeleteScript: true\n        });\n        needAttach && document.head.appendChild(script);\n    });\n}\nfunction importNodeModule(name) {\n    if (!name) {\n        throw new Error(\"import specifier is required\");\n    }\n    const importModule = new Function(\"name\", `return import(name)`);\n    return importModule(name).then((res)=>res).catch((error)=>{\n        console.error(`Error importing module ${name}:`, error);\n        throw error;\n    });\n}\nconst loadNodeFetch = async ()=>{\n    const fetchModule = await importNodeModule(\"node-fetch\");\n    return fetchModule.default || fetchModule;\n};\nconst lazyLoaderHookFetch = async (input, init)=>{\n    // @ts-ignore\n    const loaderHooks = __webpack_require__.federation.instance.loaderHook;\n    const hook = (url, init)=>{\n        return loaderHooks.lifecycle.fetch.emit(url, init);\n    };\n    const res = await hook(input, init || {});\n    if (!res || !(res instanceof Response)) {\n        const fetchFunction = typeof fetch === \"undefined\" ? await loadNodeFetch() : fetch;\n        return fetchFunction(input, init || {});\n    }\n    return res;\n};\nfunction createScriptNode(url, cb, attrs, createScriptHook) {\n    if (createScriptHook) {\n        const hookResult = createScriptHook(url);\n        if (hookResult && typeof hookResult === \"object\" && \"url\" in hookResult) {\n            url = hookResult.url;\n        }\n    }\n    let urlObj;\n    try {\n        urlObj = new URL(url);\n    } catch (e) {\n        console.error(\"Error constructing URL:\", e);\n        cb(new Error(`Invalid URL: ${e}`));\n        return;\n    }\n    const getFetch = async ()=>{\n        //@ts-ignore\n        if (true) {\n            try {\n                //@ts-ignore\n                const loaderHooks = __webpack_require__.federation.instance.loaderHook;\n                if (loaderHooks.lifecycle.fetch) {\n                    return lazyLoaderHookFetch;\n                }\n            } catch (e) {\n                console.warn(\"federation.instance.loaderHook.lifecycle.fetch failed:\", e);\n            }\n        }\n        return typeof fetch === \"undefined\" ? loadNodeFetch() : fetch;\n    };\n    const handleScriptFetch = async (f, urlObj)=>{\n        try {\n            const res = await f(urlObj.href);\n            const data = await res.text();\n            const [path, vm] = await Promise.all([\n                importNodeModule(\"path\"),\n                importNodeModule(\"vm\")\n            ]);\n            const scriptContext = {\n                exports: {},\n                module: {\n                    exports: {}\n                }\n            };\n            const urlDirname = urlObj.pathname.split(\"/\").slice(0, -1).join(\"/\");\n            const filename = \"dl_\" + path.basename(urlObj.pathname);\n            //@ts-ignore\n            const fs = require(\"fs\");\n            fs.writeFileSync(filename, data);\n            //@ts-ignore\n            const exportedInterface = require(\"./\" + filename);\n            // const script = new vm.Script(\n            //   `(function(exports, module, require, __dirname, __filename) {${data}\\n})`,\n            //   {\n            //     filename,\n            //     importModuleDynamically:\n            //       vm.constants?.USE_MAIN_CONTEXT_DEFAULT_LOADER ?? importNodeModule,\n            //   },\n            // );\n            //\n            // script.runInThisContext()(\n            //   scriptContext.exports,\n            //   scriptContext.module,\n            //   eval('require'),\n            //   urlDirname,\n            //   filename,\n            // );\n            //\n            // const exportedInterface: Record<string, any> =\n            //   scriptContext.module.exports || scriptContext.exports;\n            debugger;\n            if (attrs && exportedInterface && attrs[\"globalName\"]) {\n                const container = exportedInterface[attrs[\"globalName\"]] || exportedInterface;\n                cb(undefined, container);\n                return;\n            }\n            cb(undefined, exportedInterface);\n        } catch (e) {\n            cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));\n        }\n    };\n    getFetch().then((f)=>handleScriptFetch(f, urlObj)).catch((err)=>{\n        cb(err);\n    });\n}\nfunction loadScriptNode(url, info) {\n    return new Promise((resolve, reject)=>{\n        createScriptNode(url, (error, scriptContext)=>{\n            if (error) {\n                reject(error);\n            } else {\n                var _info_attrs, _info_attrs1;\n                const remoteEntryKey = (info == null ? void 0 : (_info_attrs = info.attrs) == null ? void 0 : _info_attrs[\"globalName\"]) || `__FEDERATION_${info == null ? void 0 : (_info_attrs1 = info.attrs) == null ? void 0 : _info_attrs1[\"name\"]}:custom__`;\n                const entryExports = globalThis[remoteEntryKey] = scriptContext;\n                resolve(entryExports);\n            }\n        }, info.attrs, info.createScriptHook);\n    });\n}\nfunction normalizeOptions(enableDefault, defaultOptions, key) {\n    return function(options) {\n        if (options === false) {\n            return false;\n        }\n        if (typeof options === \"undefined\") {\n            if (enableDefault) {\n                return defaultOptions;\n            } else {\n                return false;\n            }\n        }\n        if (options === true) {\n            return defaultOptions;\n        }\n        if (options && typeof options === \"object\") {\n            return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, defaultOptions, options);\n        }\n        throw new Error(`Unexpected type for \\`${key}\\`, expect boolean/undefined/object, got: ${typeof options}`);\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/sdk/dist/index.esm.js\n");

/***/ }),

/***/ "../../packages/sdk/dist/polyfills.esm.js":
/*!************************************************!*\
  !*** ../../packages/sdk/dist/polyfills.esm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _extends)\n/* harmony export */ });\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcGFja2FnZXMvc2RrL2Rpc3QvcG9seWZpbGxzLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0E7SUFDTEEsV0FBV0MsT0FBT0MsTUFBTSxJQUFJLFNBQVNBLE9BQU9DLE1BQU07UUFDOUMsSUFBSSxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSTtZQUNyQyxJQUFJRyxTQUFTRixTQUFTLENBQUNELEVBQUU7WUFDekIsSUFBSSxJQUFJSSxPQUFPRCxPQUFPLElBQUlOLE9BQU9RLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFFBQVFDLE1BQU1MLE1BQU0sQ0FBQ0ssSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFDMUc7UUFDQSxPQUFPTDtJQUNYO0lBQ0EsT0FBT0gsU0FBU1ksS0FBSyxDQUFDLElBQUksRUFBRVA7QUFDaEM7QUFFeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9wYWNrYWdlcy9zZGsvZGlzdC9wb2x5ZmlsbHMuZXNtLmpzPzZmZDEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gc291cmNlKWlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IHsgX2V4dGVuZHMgYXMgXyB9O1xuIl0sIm5hbWVzIjpbIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../packages/sdk/dist/polyfills.esm.js\n");

/***/ }),

/***/ "../../packages/webpack-bundler-runtime/dist/constant.esm.js":
/*!*******************************************************************!*\
  !*** ../../packages/webpack-bundler-runtime/dist/constant.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENCODE_NAME_PREFIX: () => (/* reexport safe */ _module_federation_sdk__WEBPACK_IMPORTED_MODULE_0__.ENCODE_NAME_PREFIX),\n/* harmony export */   FEDERATION_SUPPORTED_TYPES: () => (/* binding */ FEDERATION_SUPPORTED_TYPES)\n/* harmony export */ });\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @module-federation/sdk */ \"../../packages/sdk/dist/index.esm.js\");\n\nvar FEDERATION_SUPPORTED_TYPES = [\n    \"script\"\n];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcGFja2FnZXMvd2VicGFjay1idW5kbGVyLXJ1bnRpbWUvZGlzdC9jb25zdGFudC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTREO0FBRTVELElBQUlDLDZCQUE2QjtJQUM3QjtDQUNIO0FBRXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vcGFja2FnZXMvd2VicGFjay1idW5kbGVyLXJ1bnRpbWUvZGlzdC9jb25zdGFudC5lc20uanM/MjZjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBFTkNPREVfTkFNRV9QUkVGSVggfSBmcm9tICdAbW9kdWxlLWZlZGVyYXRpb24vc2RrJztcblxudmFyIEZFREVSQVRJT05fU1VQUE9SVEVEX1RZUEVTID0gW1xuICAgICdzY3JpcHQnXG5dO1xuXG5leHBvcnQgeyBGRURFUkFUSU9OX1NVUFBPUlRFRF9UWVBFUyB9O1xuIl0sIm5hbWVzIjpbIkVOQ09ERV9OQU1FX1BSRUZJWCIsIkZFREVSQVRJT05fU1VQUE9SVEVEX1RZUEVTIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../packages/webpack-bundler-runtime/dist/constant.esm.js\n");

/***/ }),

/***/ "../../packages/webpack-bundler-runtime/dist/index.esm.js":
/*!****************************************************************!*\
  !*** ../../packages/webpack-bundler-runtime/dist/index.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ federation)\n/* harmony export */ });\n/* harmony import */ var _module_federation_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @module-federation/runtime */ \"../../packages/runtime/dist/index.esm.js\");\n/* harmony import */ var _constant_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant.esm.js */ \"../../packages/webpack-bundler-runtime/dist/constant.esm.js\");\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @module-federation/sdk */ \"../../packages/sdk/dist/index.esm.js\");\n\n\n\nfunction attachShareScopeMap(webpackRequire) {\n    if (!webpackRequire.S || webpackRequire.federation.hasAttachShareScopeMap || !webpackRequire.federation.instance || !webpackRequire.federation.instance.shareScopeMap) {\n        return;\n    }\n    webpackRequire.S = webpackRequire.federation.instance.shareScopeMap;\n    webpackRequire.federation.hasAttachShareScopeMap = true;\n}\nfunction remotes(options) {\n    var chunkId = options.chunkId, promises = options.promises, chunkMapping = options.chunkMapping, idToExternalAndNameMapping = options.idToExternalAndNameMapping, webpackRequire = options.webpackRequire, idToRemoteMap = options.idToRemoteMap;\n    attachShareScopeMap(webpackRequire);\n    if (webpackRequire.o(chunkMapping, chunkId)) {\n        chunkMapping[chunkId].forEach(function(id) {\n            var getScope = webpackRequire.R;\n            if (!getScope) {\n                getScope = [];\n            }\n            var data = idToExternalAndNameMapping[id];\n            var remoteInfos = idToRemoteMap[id];\n            // @ts-ignore seems not work\n            if (getScope.indexOf(data) >= 0) {\n                return;\n            }\n            // @ts-ignore seems not work\n            getScope.push(data);\n            if (data.p) {\n                return promises.push(data.p);\n            }\n            var onError = function(error) {\n                if (!error) {\n                    error = new Error(\"Container missing\");\n                }\n                if (typeof error.message === \"string\") {\n                    error.message += '\\nwhile loading \"'.concat(data[1], '\" from ').concat(data[2]);\n                }\n                webpackRequire.m[id] = function() {\n                    throw error;\n                };\n                data.p = 0;\n            };\n            var handleFunction = function(fn, arg1, arg2, d, next, first) {\n                try {\n                    var promise = fn(arg1, arg2);\n                    if (promise && promise.then) {\n                        var p = promise.then(function(result) {\n                            return next(result, d);\n                        }, onError);\n                        if (first) {\n                            promises.push(data.p = p);\n                        } else {\n                            return p;\n                        }\n                    } else {\n                        return next(promise, d, first);\n                    }\n                } catch (error) {\n                    onError(error);\n                }\n            };\n            var onExternal = function(external, _, first) {\n                return external ? handleFunction(webpackRequire.I, data[0], 0, external, onInitialized, first) : onError();\n            };\n            // eslint-disable-next-line no-var\n            var onInitialized = function(_, external, first) {\n                return handleFunction(external.get, data[1], getScope, 0, onFactory, first);\n            };\n            // eslint-disable-next-line no-var\n            var onFactory = function(factory) {\n                data.p = 1;\n                webpackRequire.m[id] = function(module) {\n                    module.exports = factory();\n                };\n            };\n            var onRemoteLoaded = function() {\n                try {\n                    var remoteName = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_2__.decodeName)(remoteInfos[0].name, _module_federation_sdk__WEBPACK_IMPORTED_MODULE_2__.ENCODE_NAME_PREFIX);\n                    var remoteModuleName = remoteName + data[1].slice(1);\n                    return webpackRequire.federation.instance.loadRemote(remoteModuleName, {\n                        loadFactory: false,\n                        from: \"build\"\n                    });\n                } catch (error) {\n                    onError(error);\n                }\n            };\n            var useRuntimeLoad = remoteInfos.length === 1 && _constant_esm_js__WEBPACK_IMPORTED_MODULE_1__.FEDERATION_SUPPORTED_TYPES.includes(remoteInfos[0].externalType) && remoteInfos[0].name;\n            if (useRuntimeLoad) {\n                handleFunction(onRemoteLoaded, data[2], 0, 0, onFactory, 1);\n            } else {\n                handleFunction(webpackRequire, data[2], 0, 0, onExternal, 1);\n            }\n        });\n    }\n}\nfunction consumes(options) {\n    var chunkId = options.chunkId, promises = options.promises, chunkMapping = options.chunkMapping, installedModules = options.installedModules, moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire;\n    attachShareScopeMap(webpackRequire);\n    if (webpackRequire.o(chunkMapping, chunkId)) {\n        chunkMapping[chunkId].forEach(function(id) {\n            if (webpackRequire.o(installedModules, id)) {\n                return promises.push(installedModules[id]);\n            }\n            var onFactory = function(factory) {\n                installedModules[id] = 0;\n                webpackRequire.m[id] = function(module) {\n                    delete webpackRequire.c[id];\n                    module.exports = factory();\n                };\n            };\n            var onError = function(error) {\n                delete installedModules[id];\n                webpackRequire.m[id] = function(module) {\n                    delete webpackRequire.c[id];\n                    throw error;\n                };\n            };\n            try {\n                var federationInstance = webpackRequire.federation.instance;\n                if (!federationInstance) {\n                    throw new Error(\"Federation instance not found!\");\n                }\n                var _moduleToHandlerMapping_id = moduleToHandlerMapping[id], shareKey = _moduleToHandlerMapping_id.shareKey, getter = _moduleToHandlerMapping_id.getter, shareInfo = _moduleToHandlerMapping_id.shareInfo;\n                var promise = federationInstance.loadShare(shareKey, {\n                    customShareInfo: shareInfo\n                }).then(function(factory) {\n                    if (factory === false) {\n                        return getter();\n                    }\n                    return factory;\n                });\n                if (promise.then) {\n                    promises.push(installedModules[id] = promise.then(onFactory).catch(onError));\n                } else {\n                    // @ts-ignore maintain previous logic\n                    onFactory(promise);\n                }\n            } catch (e) {\n                onError(e);\n            }\n        });\n    }\n}\nfunction initializeSharing(param) {\n    var shareScopeName = param.shareScopeName, webpackRequire = param.webpackRequire, initPromises = param.initPromises, initTokens = param.initTokens, initScope = param.initScope;\n    if (!initScope) initScope = [];\n    var mfInstance = webpackRequire.federation.instance;\n    // handling circular init calls\n    var initToken = initTokens[shareScopeName];\n    if (!initToken) initToken = initTokens[shareScopeName] = {\n        from: mfInstance.name\n    };\n    if (initScope.indexOf(initToken) >= 0) return;\n    initScope.push(initToken);\n    var promise = initPromises[shareScopeName];\n    if (promise) return promise;\n    var warn = function(msg) {\n        return typeof console !== \"undefined\" && console.warn && console.warn(msg);\n    };\n    var initExternal = function(id) {\n        var handleError = function(err) {\n            return warn(\"Initialization of sharing external failed: \" + err);\n        };\n        try {\n            var module = webpackRequire(id);\n            if (!module) return;\n            var initFn = function(module) {\n                return module && module.init && // @ts-ignore compat legacy mf shared behavior\n                module.init(webpackRequire.S[shareScopeName], initScope);\n            };\n            if (module.then) return promises.push(module.then(initFn, handleError));\n            var initResult = initFn(module);\n            // @ts-ignore\n            if (initResult && typeof initResult !== \"boolean\" && initResult.then) return promises.push(initResult[\"catch\"](handleError));\n        } catch (err) {\n            handleError(err);\n        }\n    };\n    var promises = mfInstance.initializeSharing(shareScopeName, {\n        strategy: mfInstance.options.shareStrategy,\n        initScope: initScope,\n        from: \"build\"\n    });\n    attachShareScopeMap(webpackRequire);\n    var bundlerRuntimeRemotesOptions = webpackRequire.federation.bundlerRuntimeOptions.remotes;\n    if (bundlerRuntimeRemotesOptions) {\n        Object.keys(bundlerRuntimeRemotesOptions.idToRemoteMap).forEach(function(moduleId) {\n            var info = bundlerRuntimeRemotesOptions.idToRemoteMap[moduleId];\n            var externalModuleId = bundlerRuntimeRemotesOptions.idToExternalAndNameMapping[moduleId][2];\n            if (info.length > 1) {\n                initExternal(externalModuleId);\n            } else if (info.length === 1) {\n                var remoteInfo = info[0];\n                if (!_constant_esm_js__WEBPACK_IMPORTED_MODULE_1__.FEDERATION_SUPPORTED_TYPES.includes(remoteInfo.externalType)) {\n                    initExternal(externalModuleId);\n                }\n            }\n        });\n    }\n    if (!promises.length) {\n        return initPromises[shareScopeName] = true;\n    }\n    return initPromises[shareScopeName] = Promise.all(promises).then(function() {\n        return initPromises[shareScopeName] = true;\n    });\n}\nfunction handleInitialConsumes(options) {\n    var moduleId = options.moduleId, moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire;\n    var federationInstance = webpackRequire.federation.instance;\n    if (!federationInstance) {\n        throw new Error(\"Federation instance not found!\");\n    }\n    var _moduleToHandlerMapping_moduleId = moduleToHandlerMapping[moduleId], shareKey = _moduleToHandlerMapping_moduleId.shareKey, shareInfo = _moduleToHandlerMapping_moduleId.shareInfo;\n    try {\n        return federationInstance.loadShareSync(shareKey, {\n            customShareInfo: shareInfo\n        });\n    } catch (err) {\n        console.error('loadShareSync failed! The function should not be called unless you set \"eager:true\". If you do not set it, and encounter this issue, you can check whether an async boundary is implemented.');\n        console.error(\"The original error message is as follows: \");\n        throw err;\n    }\n}\nfunction installInitialConsumes(options) {\n    var moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire, installedModules = options.installedModules, initialConsumes = options.initialConsumes;\n    initialConsumes.forEach(function(id) {\n        webpackRequire.m[id] = function(module) {\n            // Handle scenario when module is used synchronously\n            installedModules[id] = 0;\n            delete webpackRequire.c[id];\n            var factory = handleInitialConsumes({\n                moduleId: id,\n                moduleToHandlerMapping: moduleToHandlerMapping,\n                webpackRequire: webpackRequire\n            });\n            if (typeof factory !== \"function\") {\n                throw new Error(\"Shared module is not available for eager consumption: \".concat(id));\n            }\n            module.exports = factory();\n        };\n    });\n}\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction initContainerEntry(options) {\n    var webpackRequire = options.webpackRequire, shareScope = options.shareScope, initScope = options.initScope, shareScopeKey = options.shareScopeKey, remoteEntryInitOptions = options.remoteEntryInitOptions;\n    if (!webpackRequire.S) return;\n    if (!webpackRequire.federation || !webpackRequire.federation.instance || !webpackRequire.federation.initOptions) return;\n    var federationInstance = webpackRequire.federation.instance;\n    var name = shareScopeKey || \"default\";\n    federationInstance.initOptions(_object_spread({\n        name: webpackRequire.federation.initOptions.name,\n        remotes: []\n    }, remoteEntryInitOptions));\n    federationInstance.initShareScopeMap(name, shareScope, {\n        hostShareScopeMap: (remoteEntryInitOptions === null || remoteEntryInitOptions === void 0 ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}\n    });\n    if (webpackRequire.federation.attachShareScopeMap) {\n        webpackRequire.federation.attachShareScopeMap(webpackRequire);\n    }\n    // @ts-ignore\n    return webpackRequire.I(name, initScope);\n}\nvar federation = {\n    runtime: _module_federation_runtime__WEBPACK_IMPORTED_MODULE_0__,\n    instance: undefined,\n    initOptions: undefined,\n    bundlerRuntime: {\n        remotes: remotes,\n        consumes: consumes,\n        I: initializeSharing,\n        S: {},\n        installInitialConsumes: installInitialConsumes,\n        initContainerEntry: initContainerEntry\n    },\n    attachShareScopeMap: attachShareScopeMap,\n    bundlerRuntimeOptions: {}\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/webpack-bundler-runtime/dist/index.esm.js\n");

/***/ }),

/***/ "webpack/container/entry/checkout":
/*!***********************!*\
  !*** container entry ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var moduleMap = {
	"./noop": () => {
		return __webpack_require__.e(/*! __federation_expose_noop */ "__federation_expose_noop").then(() => (() => ((__webpack_require__(/*! ../../packages/nextjs-mf/dist/src/federation-noop.js */ "../../packages/nextjs-mf/dist/src/federation-noop.js")))));
	},
	"./react": () => {
		return __webpack_require__.e(/*! __federation_expose_react */ "vendor-chunks/react@18.3.1").then(() => (() => ((__webpack_require__(/*! ../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js */ "../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js")))));
	},
	"./react-dom": () => {
		return Promise.all(/*! __federation_expose_react_dom */[__webpack_require__.e("vendor-chunks/scheduler@0.23.2"), __webpack_require__.e("vendor-chunks/react-dom@18.3.1_react@18.3.1")]).then(() => (() => ((__webpack_require__(/*! ../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js */ "../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js")))));
	},
	"./next/router": () => {
		return Promise.all(/*! __federation_expose_next__router */[__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1"), __webpack_require__.e("__federation_expose_next__router")]).then(() => (() => ((__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1/node_modules/next/router.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1/node_modules/next/router.js")))));
	},
	"./CheckoutTitle": () => {
		return __webpack_require__.e(/*! __federation_expose_CheckoutTitle */ "__federation_expose_CheckoutTitle").then(() => (() => ((__webpack_require__(/*! ./components/CheckoutTitle */ "./components/CheckoutTitle.tsx")))));
	},
	"./ButtonOldAnt": () => {
		return Promise.all(/*! __federation_expose_ButtonOldAnt */[__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("vendor-chunks/@ctrl+tinycolor@3.6.1"), __webpack_require__.e("vendor-chunks/antd@5.19.1_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-motion@2.9.2_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/react-is@18.3.1"), __webpack_require__.e("vendor-chunks/rc-picker@4.6.9_dayjs@1.11.12_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-pagination@4.2.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("__federation_expose_ButtonOldAnt")]).then(() => (() => ((__webpack_require__(/*! ./components/ButtonOldAnt */ "./components/ButtonOldAnt.tsx")))));
	},
	"./menu": () => {
		return Promise.all(/*! __federation_expose_menu */[__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("vendor-chunks/@ctrl+tinycolor@3.6.1"), __webpack_require__.e("vendor-chunks/antd@5.19.1_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-motion@2.9.2_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/react-is@18.3.1"), __webpack_require__.e("vendor-chunks/rc-picker@4.6.9_dayjs@1.11.12_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-pagination@4.2.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@rc-component+async-validator@5.0.4"), __webpack_require__.e("vendor-chunks/rc-menu@9.14.1_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-field-form@2.2.1_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@rc-component+trigger@2.2.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-overflow@1.3.2_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@rc-component+portal@1.1.2_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-resize-observer@1.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-tooltip@6.2.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/resize-observer-polyfill@1.5.1"), __webpack_require__.e("__federation_expose_menu")]).then(() => (() => ((__webpack_require__(/*! ./components/menu */ "./components/menu.tsx")))));
	},
	"./pages-map": () => {
		return __webpack_require__.e(/*! __federation_expose_pages_map */ "__federation_expose_pages_map").then(() => (() => ((__webpack_require__(/*! ../../packages/nextjs-mf/dist/src/loaders/nextPageMapLoader.js!../../packages/nextjs-mf/dist/src/loaders/nextPageMapLoader.js */ "../../packages/nextjs-mf/dist/src/loaders/nextPageMapLoader.js!../../packages/nextjs-mf/dist/src/loaders/nextPageMapLoader.js")))));
	},
	"./pages-map-v2": () => {
		return __webpack_require__.e(/*! __federation_expose_pages_map_v2 */ "__federation_expose_pages_map_v2").then(() => (() => ((__webpack_require__(/*! ../../packages/nextjs-mf/dist/src/loaders/nextPageMapLoader.js?v2!../../packages/nextjs-mf/dist/src/loaders/nextPageMapLoader.js */ "../../packages/nextjs-mf/dist/src/loaders/nextPageMapLoader.js?v2!../../packages/nextjs-mf/dist/src/loaders/nextPageMapLoader.js")))));
	},
	"./pages/index": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__index */ "__federation_expose_pages__index").then(() => (() => ((__webpack_require__(/*! ./pages/index.js */ "./pages/index.js")))));
	},
	"./pages/checkout/[...slug]": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__checkout__[...slug] */ "__federation_expose_pages__checkout__[...slug]").then(() => (() => ((__webpack_require__(/*! ./pages/checkout/[...slug].tsx */ "./pages/checkout/[...slug].tsx")))));
	},
	"./pages/checkout/[pid]": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__checkout__[pid] */ "__federation_expose_pages__checkout__[pid]").then(() => (() => ((__webpack_require__(/*! ./pages/checkout/[pid].tsx */ "./pages/checkout/[pid].tsx")))));
	},
	"./pages/checkout/exposed-pages": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__checkout__exposed_pages */ "__federation_expose_pages__checkout__exposed_pages").then(() => (() => ((__webpack_require__(/*! ./pages/checkout/exposed-pages.tsx */ "./pages/checkout/exposed-pages.tsx")))));
	},
	"./pages/checkout/index": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__checkout__index */ "__federation_expose_pages__checkout__index").then(() => (() => ((__webpack_require__(/*! ./pages/checkout/index.tsx */ "./pages/checkout/index.tsx")))));
	},
	"./pages/checkout/test-check-button": () => {
		return Promise.all(/*! __federation_expose_pages__checkout__test_check_button */[__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("vendor-chunks/@ctrl+tinycolor@3.6.1"), __webpack_require__.e("vendor-chunks/antd@5.19.1_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-motion@2.9.2_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/react-is@18.3.1"), __webpack_require__.e("vendor-chunks/rc-picker@4.6.9_dayjs@1.11.12_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/rc-pagination@4.2.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("__federation_expose_pages__checkout__test_check_button")]).then(() => (() => ((__webpack_require__(/*! ./pages/checkout/test-check-button.tsx */ "./pages/checkout/test-check-button.tsx")))));
	},
	"./pages/checkout/test-title": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__checkout__test_title */ "__federation_expose_pages__checkout__test_title").then(() => (() => ((__webpack_require__(/*! ./pages/checkout/test-title.tsx */ "./pages/checkout/test-title.tsx")))));
	},
	"./pages/home/exposed-pages": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__home__exposed_pages */ "__federation_expose_pages__home__exposed_pages").then(() => (() => ((__webpack_require__(/*! ./pages/home/exposed-pages.tsx */ "./pages/home/exposed-pages.tsx")))));
	},
	"./pages/home/test-broken-remotes": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__home__test_broken_remotes */ "__federation_expose_pages__home__test_broken_remotes").then(() => (() => ((__webpack_require__(/*! ./pages/home/test-broken-remotes.tsx */ "./pages/home/test-broken-remotes.tsx")))));
	},
	"./pages/home/test-remote-hook": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__home__test_remote_hook */ "__federation_expose_pages__home__test_remote_hook").then(() => (() => ((__webpack_require__(/*! ./pages/home/test-remote-hook.tsx */ "./pages/home/test-remote-hook.tsx")))));
	},
	"./pages/home/test-shared-nav": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__home__test_shared_nav */ "__federation_expose_pages__home__test_shared_nav").then(() => (() => ((__webpack_require__(/*! ./pages/home/test-shared-nav.tsx */ "./pages/home/test-shared-nav.tsx")))));
	},
	"./pages/shop/exposed-pages": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__shop__exposed_pages */ "__federation_expose_pages__shop__exposed_pages").then(() => (() => ((__webpack_require__(/*! ./pages/shop/exposed-pages.js */ "./pages/shop/exposed-pages.js")))));
	},
	"./pages/shop/index": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__shop__index */ "__federation_expose_pages__shop__index").then(() => (() => ((__webpack_require__(/*! ./pages/shop/index.js */ "./pages/shop/index.js")))));
	},
	"./pages/shop/test-webpack-png": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__shop__test_webpack_png */ "__federation_expose_pages__shop__test_webpack_png").then(() => (() => ((__webpack_require__(/*! ./pages/shop/test-webpack-png.js */ "./pages/shop/test-webpack-png.js")))));
	},
	"./pages/shop/test-webpack-svg": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__shop__test_webpack_svg */ "__federation_expose_pages__shop__test_webpack_svg").then(() => (() => ((__webpack_require__(/*! ./pages/shop/test-webpack-svg.js */ "./pages/shop/test-webpack-svg.js")))));
	},
	"./pages/shop/products/[...slug]": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__shop__products__[...slug] */ "__federation_expose_pages__shop__products__[...slug]").then(() => (() => ((__webpack_require__(/*! ./pages/shop/products/[...slug].js */ "./pages/shop/products/[...slug].js")))));
	}
};
var get = (module, getScope) => {
	__webpack_require__.R = getScope;
	getScope = (
		__webpack_require__.o(moduleMap, module)
			? moduleMap[module]()
			: Promise.resolve().then(() => {
				throw new Error('Module "' + module + '" does not exist in container.');
			})
	);
	__webpack_require__.R = undefined;
	return getScope;
};
var init = (shareScope, initScope, remoteEntryInitOptions) => {
	return __webpack_require__.federation.bundlerRuntime.initContainerEntry({	webpackRequire: __webpack_require__,
		shareScope: shareScope,
		initScope: initScope,
		remoteEntryInitOptions: remoteEntryInitOptions,
		shareScopeKey: "default"
	})
};
__webpack_require__(/*! ./node_modules/.federation/entry.cb4847f4895a7e35e3f1005036da398f.js */ "./node_modules/.federation/entry.cb4847f4895a7e35e3f1005036da398f.js")

// This exports getters to disallow modifications
__webpack_require__.d(exports, {
	get: () => (get),
	init: () => (init)
});

/***/ }),

/***/ "next/amp":
/*!***************************!*\
  !*** external "next/amp" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("next/amp");

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "next/error":
/*!*****************************!*\
  !*** external "next/error" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("next/error");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("react-dom");

/***/ }),

/***/ "styled-jsx/style":
/*!***********************************!*\
  !*** external "styled-jsx/style" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("styled-jsx/style");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "webpack/container/reference/home":
/*!*********************************************************************************!*\
  !*** external "home_app@http://localhost:3000/_next/static/ssr/remoteEntry.js" ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __webpack_error__ = new Error();
module.exports = new Promise((resolve, reject) => {
	if(typeof home_app !== "undefined") return resolve();
	__webpack_require__.l("http://localhost:3000/_next/static/ssr/remoteEntry.js", (event) => {
		if(typeof home_app !== "undefined") return resolve();
		var errorType = event && (event.type === 'load' ? 'missing' : event.type);
		var realSrc = event && event.target && event.target.src;
		__webpack_error__.message = 'Loading script failed.\n(' + errorType + ': ' + realSrc + ')';
		__webpack_error__.name = 'ScriptExternalLoadError';
		__webpack_error__.type = errorType;
		__webpack_error__.request = realSrc;
		reject(__webpack_error__);
	}, "home_app");
}).then(() => (home_app));

/***/ }),

/***/ "webpack/container/reference/shop":
/*!*****************************************************************************!*\
  !*** external "shop@http://localhost:3001/_next/static/ssr/remoteEntry.js" ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __webpack_error__ = new Error();
module.exports = new Promise((resolve, reject) => {
	if(typeof shop !== "undefined") return resolve();
	__webpack_require__.l("http://localhost:3001/_next/static/ssr/remoteEntry.js", (event) => {
		if(typeof shop !== "undefined") return resolve();
		var errorType = event && (event.type === 'load' ? 'missing' : event.type);
		var realSrc = event && event.target && event.target.src;
		__webpack_error__.message = 'Loading script failed.\n(' + errorType + ': ' + realSrc + ')';
		__webpack_error__.name = 'ScriptExternalLoadError';
		__webpack_error__.type = errorType;
		__webpack_error__.request = realSrc;
		reject(__webpack_error__);
	}, "shop");
}).then(() => (shop));

/***/ }),

/***/ "../../packages/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin":
/*!******************************************************************************************!*\
  !*** ../../packages/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = default_1;\nfunction default_1() {\n    return {\n        name: \"next-internal-plugin\",\n        createScript: function(args) {\n            // Updated type\n            var url = args.url;\n            var attrs = args.attrs;\n            if (false) { var script; }\n            return undefined;\n        },\n        errorLoadRemote: function(args) {\n            var id = args.id;\n            var error = args.error;\n            var from = args.from;\n            console.error(id, \"offline\");\n            var pg = function() {\n                console.error(id, \"offline\", error);\n                return null;\n            };\n            pg.getInitialProps = function(ctx) {\n                // Type assertion to add getInitialProps\n                return {};\n            };\n            var mod;\n            if (from === \"build\") {\n                mod = function() {\n                    return {\n                        __esModule: true,\n                        default: pg,\n                        getServerSideProps: function() {\n                            return {\n                                props: {}\n                            };\n                        }\n                    };\n                };\n            } else {\n                mod = {\n                    default: pg,\n                    getServerSideProps: function() {\n                        return {\n                            props: {}\n                        };\n                    }\n                };\n            }\n            return mod;\n        },\n        beforeInit: function(args) {\n            if (!globalThis.usedChunks) globalThis.usedChunks = new Set();\n            if (typeof __webpack_require__.j === \"string\" && !__webpack_require__.j.startsWith(\"webpack\")) {\n                return args;\n            }\n            var moduleCache = args.origin.moduleCache;\n            var name = args.origin.name;\n            var gs = new Function(\"return globalThis\")();\n            var attachedRemote = gs[name];\n            if (attachedRemote) {\n                moduleCache.set(name, attachedRemote);\n            }\n            return args;\n        },\n        init: function(args) {\n            return args;\n        },\n        beforeRequest: function(args) {\n            var options = args.options;\n            var id = args.id;\n            var remoteName = id.split(\"/\").shift();\n            var remote = options.remotes.find(function(remote) {\n                return remote.name === remoteName;\n            });\n            if (!remote) return args;\n            if (remote && remote.entry && remote.entry.includes(\"?t=\")) {\n                return args;\n            }\n            remote.entry = remote.entry + \"?t=\" + Date.now();\n            return args;\n        },\n        afterResolve: function(args) {\n            return args;\n        },\n        onLoad: function(args) {\n            var exposeModuleFactory = args.exposeModuleFactory;\n            var exposeModule = args.exposeModule;\n            var id = args.id;\n            var moduleOrFactory = exposeModuleFactory || exposeModule;\n            if (!moduleOrFactory) return args; // Ensure moduleOrFactory is defined\n            if (true) {\n                var exposedModuleExports;\n                try {\n                    exposedModuleExports = moduleOrFactory();\n                } catch (e) {\n                    exposedModuleExports = moduleOrFactory;\n                }\n                var handler = {\n                    get: function(target, prop, receiver) {\n                        // Check if accessing a static property of the function itself\n                        if (target === exposedModuleExports && typeof exposedModuleExports[prop] === \"function\") {\n                            return function() {\n                                globalThis.usedChunks.add(id);\n                                return exposedModuleExports[prop].apply(this, arguments);\n                            };\n                        }\n                        var originalMethod = target[prop];\n                        if (typeof originalMethod === \"function\") {\n                            var proxiedFunction = function() {\n                                globalThis.usedChunks.add(id);\n                                return originalMethod.apply(this, arguments);\n                            };\n                            // Copy all enumerable properties from the original method to the proxied function\n                            Object.keys(originalMethod).forEach(function(prop) {\n                                Object.defineProperty(proxiedFunction, prop, {\n                                    value: originalMethod[prop],\n                                    writable: true,\n                                    enumerable: true,\n                                    configurable: true\n                                });\n                            });\n                            return proxiedFunction;\n                        }\n                        return Reflect.get(target, prop, receiver);\n                    }\n                };\n                if (typeof exposedModuleExports === \"function\") {\n                    // If the module export is a function, we create a proxy that can handle both its\n                    // call (as a function) and access to its properties (including static methods).\n                    exposedModuleExports = new Proxy(exposedModuleExports, handler);\n                    // Proxy static properties specifically\n                    var staticProps = Object.getOwnPropertyNames(exposedModuleExports);\n                    staticProps.forEach(function(prop) {\n                        if (typeof exposedModuleExports[prop] === \"function\") {\n                            exposedModuleExports[prop] = new Proxy(exposedModuleExports[prop], handler);\n                        }\n                    });\n                    return function() {\n                        return exposedModuleExports;\n                    };\n                } else {\n                    // For objects, just wrap the exported object itself\n                    exposedModuleExports = new Proxy(exposedModuleExports, handler);\n                }\n                return exposedModuleExports;\n            }\n            return args;\n        },\n        resolveShare: function(args) {\n            if (args.pkgName !== \"react\" && args.pkgName !== \"react-dom\" && !args.pkgName.startsWith(\"next/\")) {\n                return args;\n            }\n            var shareScopeMap = args.shareScopeMap;\n            var scope = args.scope;\n            var pkgName = args.pkgName;\n            var version = args.version;\n            var GlobalFederation = args.GlobalFederation;\n            var host = GlobalFederation[\"__INSTANCES__\"][0];\n            if (!host) {\n                return args;\n            }\n            if (!host.options.shared[pkgName]) {\n                return args;\n            }\n            //handle react host next remote, disable resolving when not next host\n            args.resolver = function() {\n                shareScopeMap[scope][pkgName][version] = host.options.shared[pkgName][0]; // replace local share scope manually with desired module\n                return shareScopeMap[scope][pkgName][version];\n            };\n            return args;\n        },\n        beforeLoadShare: async function(args) {\n            return args;\n        }\n    };\n} //# sourceMappingURL=runtimePlugin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin\n");

/***/ }),

/***/ "../../packages/node/dist/src/runtimePlugin.js?runtimePlugin":
/*!*******************************************************************!*\
  !*** ../../packages/node/dist/src/runtimePlugin.js?runtimePlugin ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = default_1;\nfunction importNodeModule(name) {\n    if (!name) {\n        throw new Error(\"import specifier is required\");\n    }\n    const importModule = new Function(\"name\", `return import(name)`);\n    return importModule(name).then((res)=>res.default).catch((error)=>{\n        console.error(`Error importing module ${name}:`, error);\n        throw error;\n    });\n}\nfunction default_1() {\n    return {\n        name: \"node-federation-plugin\",\n        beforeInit (args) {\n            // Patch webpack chunk loading handlers\n            (()=>{\n                const resolveFile = (rootOutputDir, chunkId)=>{\n                    const path = require(\"path\");\n                    return path.join(__dirname, rootOutputDir + __webpack_require__.u(chunkId));\n                };\n                const resolveUrl = (remoteName, chunkName)=>{\n                    try {\n                        return new URL(chunkName, __webpack_require__.p);\n                    } catch  {\n                        const entryUrl = returnFromCache(remoteName) || returnFromGlobalInstances(remoteName);\n                        if (!entryUrl) return null;\n                        const url = new URL(entryUrl);\n                        const path = require(\"path\");\n                        url.pathname = url.pathname.replace(path.basename(url.pathname), chunkName);\n                        return url;\n                    }\n                };\n                const returnFromCache = (remoteName)=>{\n                    const globalThisVal = new Function(\"return globalThis\")();\n                    const federationInstances = globalThisVal[\"__FEDERATION__\"][\"__INSTANCES__\"];\n                    for (const instance of federationInstances){\n                        const moduleContainer = instance.moduleCache.get(remoteName);\n                        if (moduleContainer?.remoteInfo) return moduleContainer.remoteInfo.entry;\n                    }\n                    return null;\n                };\n                const returnFromGlobalInstances = (remoteName)=>{\n                    const globalThisVal = new Function(\"return globalThis\")();\n                    const federationInstances = globalThisVal[\"__FEDERATION__\"][\"__INSTANCES__\"];\n                    for (const instance of federationInstances){\n                        for (const remote of instance.options.remotes){\n                            if (remote.name === remoteName || remote.alias === remoteName) {\n                                console.log(\"Backup remote entry found:\", remote.entry);\n                                return remote.entry;\n                            }\n                        }\n                    }\n                    return null;\n                };\n                const loadFromFs = (filename, callback)=>{\n                    const fs = require(\"fs\");\n                    const path = require(\"path\");\n                    const vm = require(\"vm\");\n                    if (fs.existsSync(filename)) {\n                        fs.readFile(filename, \"utf-8\", (err, content)=>{\n                            if (err) return callback(err, null);\n                            const chunk = {};\n                            try {\n                                const script = new vm.Script(`(function(exports, require, __dirname, __filename) {${content}\\n})`, {\n                                    filename,\n                                    importModuleDynamically: vm.constants?.USE_MAIN_CONTEXT_DEFAULT_LOADER ?? importNodeModule\n                                });\n                                script.runInThisContext()(chunk, require, path.dirname(filename), filename);\n                                callback(null, chunk);\n                            } catch (e) {\n                                console.log(\"'runInThisContext threw'\", e);\n                                callback(e, null);\n                            }\n                        });\n                    } else {\n                        callback(new Error(`File ${filename} does not exist`), null);\n                    }\n                };\n                const fetchAndRun = (url, chunkName, callback)=>{\n                    (typeof fetch === \"undefined\" ? importNodeModule(\"node-fetch\").then((mod)=>mod.default) : Promise.resolve(fetch)).then((fetchFunction)=>{\n                        return args.origin.loaderHook.lifecycle.fetch.emit(url.href, {}).then((res)=>{\n                            if (!res || !(res instanceof Response)) {\n                                return fetchFunction(url.href).then((response)=>response.text());\n                            }\n                            return res.text();\n                        });\n                    }).then((data)=>{\n                        const chunk = {};\n                        try {\n                            eval(`(function(exports, require, __dirname, __filename) {${data}\\n})`)(chunk, require, url.pathname.split(\"/\").slice(0, -1).join(\"/\"), chunkName);\n                            callback(null, chunk);\n                        } catch (e) {\n                            callback(e, null);\n                        }\n                    }).catch((err)=>callback(err, null));\n                };\n                const loadChunk = (strategy, chunkId, rootOutputDir, callback)=>{\n                    if (strategy === \"filesystem\") {\n                        return loadFromFs(resolveFile(rootOutputDir, chunkId), callback);\n                    }\n                    const url = resolveUrl(rootOutputDir, chunkId);\n                    if (!url) return callback(null, {\n                        modules: {},\n                        ids: [],\n                        runtime: null\n                    });\n                    fetchAndRun(url, chunkId, callback);\n                };\n                const installedChunks = {};\n                const installChunk = (chunk)=>{\n                    for(const moduleId in chunk.modules){\n                        __webpack_require__.m[moduleId] = chunk.modules[moduleId];\n                    }\n                    if (chunk.runtime) chunk.runtime(__webpack_require__);\n                    for (const chunkId of chunk.ids){\n                        if (installedChunks[chunkId]) installedChunks[chunkId][0]();\n                        installedChunks[chunkId] = 0;\n                    }\n                };\n                __webpack_require__.l = (url, done, key, chunkId)=>{\n                    if (!key || chunkId) throw new Error(`__webpack_require__.l name is required for ${url}`);\n                    __webpack_require__.federation.runtime.loadScriptNode(url, {\n                        attrs: {\n                            globalName: key\n                        }\n                    }).then((res)=>{\n                        const enhancedRemote = __webpack_require__.federation.instance.initRawContainer(key, url, res);\n                        new Function(\"return globalThis\")()[key] = enhancedRemote;\n                        done(enhancedRemote);\n                    }).catch(done);\n                };\n                if (__webpack_require__.f) {\n                    const handle = (chunkId, promises)=>{\n                        let installedChunkData = installedChunks[chunkId];\n                        if (installedChunkData !== 0) {\n                            if (installedChunkData) {\n                                promises.push(installedChunkData[2]);\n                            } else {\n                                const matcher = __webpack_require__.federation.chunkMatcher ? __webpack_require__.federation.chunkMatcher(chunkId) : true;\n                                if (matcher) {\n                                    const promise = new Promise((resolve, reject)=>{\n                                        installedChunkData = installedChunks[chunkId] = [\n                                            resolve,\n                                            reject\n                                        ];\n                                        const fs = typeof process !== \"undefined\" ? require(\"fs\") : false;\n                                        const filename = typeof process !== \"undefined\" ? resolveFile(__webpack_require__.federation.rootOutputDir || \"\", chunkId) : false;\n                                        if (fs && fs.existsSync(filename)) {\n                                            loadChunk(\"filesystem\", chunkId, __webpack_require__.federation.rootOutputDir || \"\", (err, chunk)=>{\n                                                if (err) return reject(err);\n                                                if (chunk) installChunk(chunk);\n                                                resolve(chunk);\n                                            });\n                                        } else {\n                                            const chunkName = __webpack_require__.u(chunkId);\n                                            const loadingStrategy = typeof process === \"undefined\" ? \"http-eval\" : \"http-vm\";\n                                            loadChunk(loadingStrategy, chunkName, __webpack_require__.federation.initOptions.name, (err, chunk)=>{\n                                                if (err) return reject(err);\n                                                if (chunk) installChunk(chunk);\n                                                resolve(chunk);\n                                            });\n                                        }\n                                    });\n                                    promises.push(installedChunkData[2] = promise);\n                                } else {\n                                    installedChunks[chunkId] = 0;\n                                }\n                            }\n                        }\n                    };\n                    if (__webpack_require__.f.require) {\n                        console.warn(\"\\x1b[33m%s\\x1b[0m\", 'CAUTION: build target is not set to \"async-node\", attempting to patch additional chunk handlers. This may not work');\n                        __webpack_require__.f.require = handle;\n                    }\n                    if (__webpack_require__.f.readFileVm) {\n                        __webpack_require__.f.readFileVm = handle;\n                    }\n                }\n            })();\n            return args;\n        }\n    };\n} //# sourceMappingURL=runtimePlugin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/node/dist/src/runtimePlugin.js?runtimePlugin\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/federation runtime */
/******/ 	(() => {
/******/ 		if(!__webpack_require__.federation){
/******/ 			__webpack_require__.federation = {
/******/ 				initOptions: {"name":"checkout","remotes":[{"alias":"home","name":"home_app","entry":"http://localhost:3000/_next/static/ssr/remoteEntry.js","shareScope":"default"},{"alias":"shop","name":"shop","entry":"http://localhost:3001/_next/static/ssr/remoteEntry.js","shareScope":"default"}],"shareStrategy":"loaded-first"},
/******/ 				chunkMatcher: function(chunkId) {return !/^(webpack_sharing_consume_default_(ant\-design_colors_ant\-design_colors\-webpack_sharing_consume_d\-(1dea55[01]|249655[01]|83d466[01]|b8eb24[01]|f7a168[01])|react_jsx\-runtime_react_jsx\-runtime\-_1fa9[012345])|__federation_expose_next__router)$/.test(chunkId)},
/******/ 				rootOutputDir: "",
/******/ 				initialConsumes: undefined,
/******/ 				bundlerRuntimeOptions: {}
/******/ 			};
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "-" + {"__federation_expose_noop":"68e9e56ae1f11526","vendor-chunks/react@18.3.1":"e37561e3b518e95f","vendor-chunks/scheduler@0.23.2":"5bd161c41ec63f77","vendor-chunks/react-dom@18.3.1_react@18.3.1":"2499c58791fedaaf","vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0":"b2196fdcf79cbd0f","vendor-chunks/@swc+helpers@0.5.2":"2b1c51d8d8a458b1","vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1":"4715d43905298b8e","__federation_expose_next__router":"6b27fb17a8228e16","__federation_expose_CheckoutTitle":"ddedf33cf4773ba7","vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0":"10e3c8015d98e4c8","vendor-chunks/@babel+runtime@7.24.8":"8dde9015b0848824","vendor-chunks/@babel+runtime@7.24.5":"32e417dac3594043","vendor-chunks/classnames@2.5.1":"1d602141f1f81208","vendor-chunks/@ctrl+tinycolor@3.6.1":"dc9628ae2e43fc1b","vendor-chunks/antd@5.19.1_react-dom@18.2.0_react@18.2.0":"6c6533135acd18c6","vendor-chunks/rc-motion@2.9.2_react-dom@18.2.0_react@18.2.0":"14f5346ce5f31d79","vendor-chunks/react-is@18.3.1":"f5f38ec3e56b3adf","vendor-chunks/rc-picker@4.6.9_dayjs@1.11.12_react-dom@18.2.0_react@18.2.0":"ab20f7a3a3d99e37","vendor-chunks/rc-pagination@4.2.0_react-dom@18.2.0_react@18.2.0":"6f8fa4340bfe3441","__federation_expose_ButtonOldAnt":"ea0e4366a64b191e","vendor-chunks/@rc-component+async-validator@5.0.4":"f49aafeda20f21c4","vendor-chunks/rc-menu@9.14.1_react-dom@18.2.0_react@18.2.0":"d5fcb1c6c03e16b6","vendor-chunks/rc-field-form@2.2.1_react-dom@18.2.0_react@18.2.0":"6e7e423c57176f99","vendor-chunks/@rc-component+trigger@2.2.0_react-dom@18.2.0_react@18.2.0":"95fead0705534ada","vendor-chunks/rc-overflow@1.3.2_react-dom@18.2.0_react@18.2.0":"0539ab52576d4998","vendor-chunks/@rc-component+portal@1.1.2_react-dom@18.2.0_react@18.2.0":"e428b90291a32c76","vendor-chunks/rc-resize-observer@1.4.0_react-dom@18.2.0_react@18.2.0":"e1ffd3315bbd3bd7","vendor-chunks/rc-tooltip@6.2.0_react-dom@18.2.0_react@18.2.0":"cf51be34bdcf9e94","vendor-chunks/resize-observer-polyfill@1.5.1":"1a7d56c6ea9bfa4d","__federation_expose_menu":"2b25981f9413378f","__federation_expose_pages_map":"9f4df16c12a7c359","__federation_expose_pages_map_v2":"3509ae9577f3c6d7","__federation_expose_pages__index":"68c7f5b688e2971e","__federation_expose_pages__checkout__[...slug]":"b25d3e14079af5f0","__federation_expose_pages__checkout__[pid]":"2160bb3ca0cdcf47","__federation_expose_pages__checkout__exposed_pages":"4079637839bf2b63","__federation_expose_pages__checkout__index":"e049ce9898e84a83","__federation_expose_pages__checkout__test_check_button":"84b731c411d6fc42","__federation_expose_pages__checkout__test_title":"11aa048712b80042","__federation_expose_pages__home__exposed_pages":"7746e7316d0a2b6a","__federation_expose_pages__home__test_broken_remotes":"9f3d12c9b64f9448","__federation_expose_pages__home__test_remote_hook":"8bc2b5ff9b7eab3d","__federation_expose_pages__home__test_shared_nav":"326b7ccd6f8aa05f","__federation_expose_pages__shop__exposed_pages":"46cc73f6547cfcac","__federation_expose_pages__shop__index":"0c879df334bf68d4","__federation_expose_pages__shop__test_webpack_png":"5be063ff75d8d011","__federation_expose_pages__shop__test_webpack_svg":"d8d04e5e5a9d09a8","__federation_expose_pages__shop__products__[...slug]":"28b92be1a3164dec","vendor-chunks/@ant-design+colors@7.1.0":"4a0827a371229654","vendor-chunks/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0":"1773d32f940d6942","vendor-chunks/stylis@4.3.2":"152ccdd8c536205d","vendor-chunks/@emotion+hash@0.8.0":"c65eea4c4f236811","vendor-chunks/@emotion+unitless@0.7.5":"f60bca1e2aacd1f6","vendor-chunks/@ant-design+icons-svg@4.4.2":"1def3ce7fdf81c61","vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0":"ef6a9094ffca3155","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-f7a1680":"f55939fc08ed304d","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-1dea550":"bb501986bd99f8c6","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-83d4660":"31fa9256c6f240c7","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-b8eb240":"b9b88141a3c153df","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-2496550":"6dfc16a0a3323a0f","webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa90":"d8864787889778bf","webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa91":"b642f4d565be35ea","webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa92":"9f46e0d8118c805d","webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa93":"26aa44b329e0b0a0","webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa94":"18e5aac845df0968","webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa95":"e9f12eb00fe00d4b","vendor-chunks/react@18.2.0":"fb65f0b34ae736f4","vendor-chunks/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0":"400fac3fbd0903eb","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-f7a1681":"55020efb324d427e","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-1dea551":"9218322e792cc8cd","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-b8eb241":"0c37231739db8c85","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-2496551":"673821a7014ccff5","webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-83d4661":"762b01d0501f9661"}[chunkId] + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "checkout:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/remotes loading */
/******/ 	(() => {
/******/ 		var chunkMapping = {
/******/ 			"__federation_expose_pages__index": [
/******/ 				"webpack/container/remote/home/pages/index"
/******/ 			],
/******/ 			"__federation_expose_pages__home__exposed_pages": [
/******/ 				"webpack/container/remote/home/pages/home/exposed-pages"
/******/ 			],
/******/ 			"__federation_expose_pages__home__test_broken_remotes": [
/******/ 				"webpack/container/remote/home/pages/home/test-broken-remotes"
/******/ 			],
/******/ 			"__federation_expose_pages__home__test_remote_hook": [
/******/ 				"webpack/container/remote/home/pages/home/test-remote-hook"
/******/ 			],
/******/ 			"__federation_expose_pages__home__test_shared_nav": [
/******/ 				"webpack/container/remote/home/pages/home/test-shared-nav"
/******/ 			],
/******/ 			"__federation_expose_pages__shop__exposed_pages": [
/******/ 				"webpack/container/remote/shop/pages/shop/exposed-pages"
/******/ 			],
/******/ 			"__federation_expose_pages__shop__index": [
/******/ 				"webpack/container/remote/shop/pages/shop/index"
/******/ 			],
/******/ 			"__federation_expose_pages__shop__test_webpack_png": [
/******/ 				"webpack/container/remote/shop/pages/shop/test-webpack-png"
/******/ 			],
/******/ 			"__federation_expose_pages__shop__test_webpack_svg": [
/******/ 				"webpack/container/remote/shop/pages/shop/test-webpack-svg"
/******/ 			],
/******/ 			"__federation_expose_pages__shop__products__[...slug]": [
/******/ 				"webpack/container/remote/shop/pages/shop/products/[...slug]"
/******/ 			]
/******/ 		};
/******/ 		var idToExternalAndNameMapping = {
/******/ 			"webpack/container/remote/home/pages/index": [
/******/ 				"default",
/******/ 				"./pages/index",
/******/ 				"webpack/container/reference/home"
/******/ 			],
/******/ 			"webpack/container/remote/home/pages/home/exposed-pages": [
/******/ 				"default",
/******/ 				"./pages/home/exposed-pages",
/******/ 				"webpack/container/reference/home"
/******/ 			],
/******/ 			"webpack/container/remote/home/pages/home/test-broken-remotes": [
/******/ 				"default",
/******/ 				"./pages/home/test-broken-remotes",
/******/ 				"webpack/container/reference/home"
/******/ 			],
/******/ 			"webpack/container/remote/home/pages/home/test-remote-hook": [
/******/ 				"default",
/******/ 				"./pages/home/test-remote-hook",
/******/ 				"webpack/container/reference/home"
/******/ 			],
/******/ 			"webpack/container/remote/home/pages/home/test-shared-nav": [
/******/ 				"default",
/******/ 				"./pages/home/test-shared-nav",
/******/ 				"webpack/container/reference/home"
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/exposed-pages": [
/******/ 				"default",
/******/ 				"./pages/shop/exposed-pages",
/******/ 				"webpack/container/reference/shop"
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/index": [
/******/ 				"default",
/******/ 				"./pages/shop/index",
/******/ 				"webpack/container/reference/shop"
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/test-webpack-png": [
/******/ 				"default",
/******/ 				"./pages/shop/test-webpack-png",
/******/ 				"webpack/container/reference/shop"
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/test-webpack-svg": [
/******/ 				"default",
/******/ 				"./pages/shop/test-webpack-svg",
/******/ 				"webpack/container/reference/shop"
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/products/[...slug]": [
/******/ 				"default",
/******/ 				"./pages/shop/products/[...slug]",
/******/ 				"webpack/container/reference/shop"
/******/ 			]
/******/ 		};
/******/ 		var idToRemoteMap = {
/******/ 			"webpack/container/remote/home/pages/index": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "home_app",
/******/ 					"externalModuleId": "webpack/container/reference/home"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/home/pages/home/exposed-pages": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "home_app",
/******/ 					"externalModuleId": "webpack/container/reference/home"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/home/pages/home/test-broken-remotes": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "home_app",
/******/ 					"externalModuleId": "webpack/container/reference/home"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/home/pages/home/test-remote-hook": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "home_app",
/******/ 					"externalModuleId": "webpack/container/reference/home"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/home/pages/home/test-shared-nav": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "home_app",
/******/ 					"externalModuleId": "webpack/container/reference/home"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/exposed-pages": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "shop",
/******/ 					"externalModuleId": "webpack/container/reference/shop"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/index": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "shop",
/******/ 					"externalModuleId": "webpack/container/reference/shop"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/test-webpack-png": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "shop",
/******/ 					"externalModuleId": "webpack/container/reference/shop"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/test-webpack-svg": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "shop",
/******/ 					"externalModuleId": "webpack/container/reference/shop"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/shop/pages/shop/products/[...slug]": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "shop",
/******/ 					"externalModuleId": "webpack/container/reference/shop"
/******/ 				}
/******/ 			]
/******/ 		};
/******/ 		__webpack_require__.federation.bundlerRuntimeOptions.remotes = {idToRemoteMap,chunkMapping, idToExternalAndNameMapping, webpackRequire:__webpack_require__};
/******/ 		__webpack_require__.f.remotes = (chunkId, promises) => {
/******/ 			__webpack_require__.federation.bundlerRuntime.remotes({idToRemoteMap,chunkMapping, idToExternalAndNameMapping, chunkId, promises, webpackRequire:__webpack_require__});
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/runtimeId */
/******/ 	(() => {
/******/ 		__webpack_require__.j = "checkout";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/sharing */
/******/ 	(() => {
/******/ 		__webpack_require__.S = {};
/******/ 		var initPromises = {};
/******/ 		var initTokens = {};
/******/ 		__webpack_require__.I = (name, initScope) => {
/******/ 			if(!initScope) initScope = [];
/******/ 			// handling circular init calls
/******/ 			var initToken = initTokens[name];
/******/ 			if(!initToken) initToken = initTokens[name] = {};
/******/ 			if(initScope.indexOf(initToken) >= 0) return;
/******/ 			initScope.push(initToken);
/******/ 			// only runs once
/******/ 			if(initPromises[name]) return initPromises[name];
/******/ 			// creates a new share scope if needed
/******/ 			if(!__webpack_require__.o(__webpack_require__.S, name)) __webpack_require__.S[name] = {};
/******/ 			// runs all init snippets from all modules reachable
/******/ 			var scope = __webpack_require__.S[name];
/******/ 			var warn = (msg) => {
/******/ 				if (typeof console !== "undefined" && console.warn) console.warn(msg);
/******/ 			};
/******/ 			var uniqueName = "checkout";
/******/ 			var register = (name, version, factory, eager) => {
/******/ 				var versions = scope[name] = scope[name] || {};
/******/ 				var activeVersion = versions[version];
/******/ 				if(!activeVersion || (!activeVersion.loaded && (!eager != !activeVersion.eager ? eager : uniqueName > activeVersion.from))) versions[version] = { get: factory, from: uniqueName, eager: !!eager };
/******/ 			};
/******/ 			var initExternal = (id) => {
/******/ 				var handleError = (err) => (warn("Initialization of sharing external failed: " + err));
/******/ 				try {
/******/ 					var module = __webpack_require__(id);
/******/ 					if(!module) return;
/******/ 					var initFn = (module) => (module && module.init && module.init(__webpack_require__.S[name], initScope))
/******/ 					if(module.then) return promises.push(module.then(initFn, handleError));
/******/ 					var initResult = initFn(module);
/******/ 					if(initResult && initResult.then) return promises.push(initResult['catch'](handleError));
/******/ 				} catch(err) { handleError(err); }
/******/ 			}
/******/ 			var promises = [];
/******/ 			switch(name) {
/******/ 				case "default": {
/******/ 					register("@ant-design/colors", "7.1.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/@ctrl+tinycolor@3.6.1"), __webpack_require__.e("vendor-chunks/@ant-design+colors@7.1.0")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+colors@7.1.0/node_modules/@ant-design/colors/lib/index.js */ "../../node_modules/.pnpm/@ant-design+colors@7.1.0/node_modules/@ant-design/colors/lib/index.js"))))));
/******/ 					register("@ant-design/cssinjs", "1.21.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/stylis@4.3.2"), __webpack_require__.e("vendor-chunks/@emotion+hash@0.8.0"), __webpack_require__.e("vendor-chunks/@emotion+unitless@0.7.5")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/cssinjs/lib/index.js */ "../../node_modules/.pnpm/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/cssinjs/lib/index.js"))))));
/******/ 					register("@ant-design/icons-svg/es/asn/BarsOutlined", "4.4.2", () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/BarsOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/BarsOutlined.js"))))));
/******/ 					register("@ant-design/icons-svg/es/asn/EllipsisOutlined", "4.4.2", () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/EllipsisOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/EllipsisOutlined.js"))))));
/******/ 					register("@ant-design/icons-svg/es/asn/LeftOutlined", "4.4.2", () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js"))))));
/******/ 					register("@ant-design/icons-svg/es/asn/RightOutlined", "4.4.2", () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/RightOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/RightOutlined.js"))))));
/******/ 					register("@ant-design/icons-svg/lib/asn/LoadingOutlined", "4.4.2", () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/lib/asn/LoadingOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/lib/asn/LoadingOutlined.js"))))));
/******/ 					register("@ant-design/icons/LoadingOutlined", "5.4.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-f7a1680")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/LoadingOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/LoadingOutlined.js"))))));
/******/ 					register("@ant-design/icons/es/components/Context", "5.4.0", () => (__webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/components/Context.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/components/Context.js"))))));
/******/ 					register("@ant-design/icons/es/icons/BarsOutlined", "5.4.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-1dea550")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/BarsOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/BarsOutlined.js"))))));
/******/ 					register("@ant-design/icons/es/icons/EllipsisOutlined", "5.4.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-83d4660")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js"))))));
/******/ 					register("@ant-design/icons/es/icons/LeftOutlined", "5.4.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-b8eb240")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/LeftOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/LeftOutlined.js"))))));
/******/ 					register("@ant-design/icons/es/icons/RightOutlined", "5.4.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-2496550")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/RightOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/RightOutlined.js"))))));
/******/ 					register("@ant-design/icons/lib/components/Context", "5.4.0", () => (__webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/lib/components/Context.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/lib/components/Context.js"))))));
/******/ 					register("next/dynamic", "14.1.2", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa90")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dynamic.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dynamic.js"))))));
/******/ 					register("next/head", "14.1.2", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa91")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/head.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/head.js"))))));
/******/ 					register("next/image", "14.1.2", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa92")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/image.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/image.js"))))));
/******/ 					register("next/link", "14.1.2", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa93")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/link.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/link.js"))))));
/******/ 					register("next/router", "14.1.2", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa94")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/router.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/router.js"))))));
/******/ 					register("next/script", "14.1.2", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa95")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/script.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/script.js"))))));
/******/ 					register("react/jsx-dev-runtime", "18.2.0", () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js */ "../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js"))))));
/******/ 					register("react/jsx-runtime", "18.2.0", () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js */ "../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js"))))));
/******/ 					register("react/jsx-runtime", "18.3.1", () => (__webpack_require__.e("vendor-chunks/react@18.3.1").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js */ "../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"))))));
/******/ 					register("styled-jsx", "5.1.6", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0/node_modules/styled-jsx/index.js */ "../../node_modules/.pnpm/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0/node_modules/styled-jsx/index.js"))))));
/******/ 					initExternal("webpack/container/reference/home");
/******/ 					initExternal("webpack/container/reference/shop");
/******/ 				}
/******/ 				break;
/******/ 			}
/******/ 			if(!promises.length) return initPromises[name] = 1;
/******/ 			return initPromises[name] = Promise.all(promises).then(() => (initPromises[name] = 1));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/sharing */
/******/ 	(() => {
/******/ 		__webpack_require__.federation.initOptions.shared = {	"@ant-design/colors": [{	version: "7.1.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/@ctrl+tinycolor@3.6.1"), __webpack_require__.e("vendor-chunks/@ant-design+colors@7.1.0")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+colors@7.1.0/node_modules/@ant-design/colors/lib/index.js */ "../../node_modules/.pnpm/@ant-design+colors@7.1.0/node_modules/@ant-design/colors/lib/index.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/cssinjs": [{	version: "1.21.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/stylis@4.3.2"), __webpack_require__.e("vendor-chunks/@emotion+hash@0.8.0"), __webpack_require__.e("vendor-chunks/@emotion+unitless@0.7.5")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/cssinjs/lib/index.js */ "../../node_modules/.pnpm/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/cssinjs/lib/index.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons-svg/es/asn/BarsOutlined": [{	version: "4.4.2",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/BarsOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/BarsOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons-svg/es/asn/EllipsisOutlined": [{	version: "4.4.2",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/EllipsisOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/EllipsisOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons-svg/es/asn/LeftOutlined": [{	version: "4.4.2",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons-svg/es/asn/RightOutlined": [{	version: "4.4.2",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/RightOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/RightOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons-svg/lib/asn/LoadingOutlined": [{	version: "4.4.2",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/lib/asn/LoadingOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/lib/asn/LoadingOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons/LoadingOutlined": [{	version: "5.4.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-f7a1680")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/LoadingOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/LoadingOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons/es/components/Context": [{	version: "5.4.0",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/components/Context.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/components/Context.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons/es/icons/BarsOutlined": [{	version: "5.4.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-1dea550")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/BarsOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/BarsOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons/es/icons/EllipsisOutlined": [{	version: "5.4.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-83d4660")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons/es/icons/LeftOutlined": [{	version: "5.4.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-b8eb240")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/LeftOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/LeftOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons/es/icons/RightOutlined": [{	version: "5.4.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.5"), __webpack_require__.e("vendor-chunks/classnames@2.5.1"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-2496550")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/RightOutlined.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/RightOutlined.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"@ant-design/icons/lib/components/Context": [{	version: "5.4.0",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/lib/components/Context.js */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/lib/components/Context.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/dynamic": [{	version: "14.1.2",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa90")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dynamic.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dynamic.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/head": [{	version: "14.1.2",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa91")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/head.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/head.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/image": [{	version: "14.1.2",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa92")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/image.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/image.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/link": [{	version: "14.1.2",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa93")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/link.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/link.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/router": [{	version: "14.1.2",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa94")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/router.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/router.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/script": [{	version: "14.1.2",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa95")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/script.js */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/script.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"react/jsx-dev-runtime": [{	version: "18.2.0",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js */ "../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"react/jsx-runtime": [{	version: "18.2.0",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js */ "../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},{	version: "18.3.1",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/react@18.3.1").then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js */ "../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"styled-jsx": [{	version: "5.1.6",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0")]).then(() => (() => (__webpack_require__(/*! ../../node_modules/.pnpm/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0/node_modules/styled-jsx/index.js */ "../../node_modules/.pnpm/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0/node_modules/styled-jsx/index.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":"^5.1.6","strictVersion":false,"singleton":true}},],}
/******/ 		__webpack_require__.S = {};
/******/ 		var initPromises = {};
/******/ 		var initTokens = {};
/******/ 		__webpack_require__.I = (name, initScope) => {
/******/ 			return __webpack_require__.federation.bundlerRuntime.I({	shareScopeName: name,
/******/ 				webpackRequire: __webpack_require__,
/******/ 				initPromises: initPromises,
/******/ 				initTokens: initTokens,
/******/ 				initScope: initScope,
/******/ 			})
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/consumes */
/******/ 	(() => {
/******/ 		var installedModules = {};
/******/ 		var moduleToHandlerMapping = {
/******/ 			"webpack/sharing/consume/default/next/head/next/head?8450": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa91")]).then(() => (() => (__webpack_require__(/*! next/head */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/head.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^12 || ^13 || ^14",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/head",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/router/next/router": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa94")]).then(() => (() => (__webpack_require__(/*! next/router */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/router.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/router",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/link/next/link": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa93")]).then(() => (() => (__webpack_require__(/*! next/link */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/link.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^12 || ^13 || ^14",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/link",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/script/next/script": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa95")]).then(() => (() => (__webpack_require__(/*! next/script */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/script.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^12 || ^13 || ^14",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/script",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/image/next/image": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa92")]).then(() => (() => (__webpack_require__(/*! next/image */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/image.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^12 || ^13 || ^14",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/image",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/dynamic/next/dynamic": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa90")]).then(() => (() => (__webpack_require__(/*! next/dynamic */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dynamic.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^12 || ^13 || ^14",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/dynamic",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/styled-jsx/styled-jsx": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0")]).then(() => (() => (__webpack_require__(/*! styled-jsx */ "../../node_modules/.pnpm/styled-jsx@5.1.1_@babel+core@7.24.9_react@18.2.0/node_modules/styled-jsx/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^5.1.6",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "styled-jsx",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?c892": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react@18.3.1").then(() => (() => (__webpack_require__(/*! react/jsx-runtime */ "../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react/jsx-runtime",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! react/jsx-dev-runtime */ "../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react/jsx-dev-runtime",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/cssinjs/@ant-design/cssinjs": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/stylis@4.3.2"), __webpack_require__.e("vendor-chunks/@emotion+hash@0.8.0"), __webpack_require__.e("vendor-chunks/@emotion+unitless@0.7.5")]).then(() => (() => (__webpack_require__(/*! @ant-design/cssinjs */ "../../node_modules/.pnpm/@ant-design+cssinjs@1.21.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/cssinjs/lib/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^1.21.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/cssinjs",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons/lib/components/Context/@ant-design/icons/lib/components/Context": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0").then(() => (() => (__webpack_require__(/*! @ant-design/icons/lib/components/Context */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/lib/components/Context.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^5.3.7",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons/lib/components/Context",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?f464": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/@ant-design+colors@7.1.0").then(() => (() => (__webpack_require__(/*! @ant-design/colors */ "../../node_modules/.pnpm/@ant-design+colors@7.1.0/node_modules/@ant-design/colors/lib/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^7.1.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/colors",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons/LoadingOutlined/@ant-design/icons/LoadingOutlined": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-f7a1681")]).then(() => (() => (__webpack_require__(/*! @ant-design/icons/LoadingOutlined */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/LoadingOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^5.3.7",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons/LoadingOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons/es/icons/BarsOutlined/@ant-design/icons/es/icons/BarsOutlined": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-1dea551")]).then(() => (() => (__webpack_require__(/*! @ant-design/icons/es/icons/BarsOutlined */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/BarsOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^5.3.7",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons/es/icons/BarsOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons/es/icons/LeftOutlined/@ant-design/icons/es/icons/LeftOutlined": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-b8eb241")]).then(() => (() => (__webpack_require__(/*! @ant-design/icons/es/icons/LeftOutlined */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/LeftOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^5.3.7",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons/es/icons/LeftOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons/es/icons/RightOutlined/@ant-design/icons/es/icons/RightOutlined": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-2496551")]).then(() => (() => (__webpack_require__(/*! @ant-design/icons/es/icons/RightOutlined */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/RightOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^5.3.7",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons/es/icons/RightOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons/es/components/Context/@ant-design/icons/es/components/Context": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0").then(() => (() => (__webpack_require__(/*! @ant-design/icons/es/components/Context */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/components/Context.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^5.3.7",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons/es/components/Context",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons/es/icons/EllipsisOutlined/@ant-design/icons/es/icons/EllipsisOutlined": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/rc-util@5.43.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@babel+runtime@7.24.8"), __webpack_require__.e("vendor-chunks/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-83d4661")]).then(() => (() => (__webpack_require__(/*! @ant-design/icons/es/icons/EllipsisOutlined */ "../../node_modules/.pnpm/@ant-design+icons@5.4.0_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^5.3.7",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons/es/icons/EllipsisOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/head/next/head?2efa": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa91")]).then(() => (() => (__webpack_require__(/*! next/head */ "../../node_modules/.pnpm/next@14.1.2_@babel+core@7.24.9_react-dom@18.2.0_react@18.2.0/node_modules/next/head.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "14.1.2",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/head",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/@ctrl+tinycolor@3.6.1"), __webpack_require__.e("vendor-chunks/@ant-design+colors@7.1.0")]).then(() => (() => (__webpack_require__(/*! @ant-design/colors */ "../../node_modules/.pnpm/@ant-design+colors@7.1.0/node_modules/@ant-design/colors/lib/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^7.0.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/colors",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons-svg/lib/asn/LoadingOutlined/@ant-design/icons-svg/lib/asn/LoadingOutlined": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! @ant-design/icons-svg/lib/asn/LoadingOutlined */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/lib/asn/LoadingOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^4.4.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons-svg/lib/asn/LoadingOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/BarsOutlined/@ant-design/icons-svg/es/asn/BarsOutlined": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! @ant-design/icons-svg/es/asn/BarsOutlined */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/BarsOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^4.4.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons-svg/es/asn/BarsOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/EllipsisOutlined/@ant-design/icons-svg/es/asn/EllipsisOutlined": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! @ant-design/icons-svg/es/asn/EllipsisOutlined */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/EllipsisOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^4.4.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons-svg/es/asn/EllipsisOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/LeftOutlined/@ant-design/icons-svg/es/asn/LeftOutlined": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! @ant-design/icons-svg/es/asn/LeftOutlined */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^4.4.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons-svg/es/asn/LeftOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/RightOutlined/@ant-design/icons-svg/es/asn/RightOutlined": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/@ant-design+icons-svg@4.4.2").then(() => (() => (__webpack_require__(/*! @ant-design/icons-svg/es/asn/RightOutlined */ "../../node_modules/.pnpm/@ant-design+icons-svg@4.4.2/node_modules/@ant-design/icons-svg/es/asn/RightOutlined.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^4.4.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "@ant-design/icons-svg/es/asn/RightOutlined",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?1fa9": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! react/jsx-runtime */ "../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react/jsx-runtime",
/******/ 			}
/******/ 		};
/******/ 		// no consumes in initial chunks
/******/ 		var chunkMapping = {
/******/ 			"__federation_expose_noop": [
/******/ 				"webpack/sharing/consume/default/next/head/next/head?8450",
/******/ 				"webpack/sharing/consume/default/next/router/next/router",
/******/ 				"webpack/sharing/consume/default/next/link/next/link",
/******/ 				"webpack/sharing/consume/default/next/script/next/script",
/******/ 				"webpack/sharing/consume/default/next/image/next/image",
/******/ 				"webpack/sharing/consume/default/next/dynamic/next/dynamic",
/******/ 				"webpack/sharing/consume/default/styled-jsx/styled-jsx",
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?c892"
/******/ 			],
/******/ 			"__federation_expose_next__router": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?c892"
/******/ 			],
/******/ 			"__federation_expose_CheckoutTitle": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime"
/******/ 			],
/******/ 			"__federation_expose_ButtonOldAnt": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/@ant-design/cssinjs/@ant-design/cssinjs",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/lib/components/Context/@ant-design/icons/lib/components/Context",
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?f464",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/LoadingOutlined/@ant-design/icons/LoadingOutlined"
/******/ 			],
/******/ 			"__federation_expose_menu": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/next/router/next/router",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/es/icons/BarsOutlined/@ant-design/icons/es/icons/BarsOutlined",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/es/icons/LeftOutlined/@ant-design/icons/es/icons/LeftOutlined",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/es/icons/RightOutlined/@ant-design/icons/es/icons/RightOutlined",
/******/ 				"webpack/sharing/consume/default/@ant-design/cssinjs/@ant-design/cssinjs",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/es/components/Context/@ant-design/icons/es/components/Context",
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?f464",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/es/icons/EllipsisOutlined/@ant-design/icons/es/icons/EllipsisOutlined"
/******/ 			],
/******/ 			"__federation_expose_pages__checkout__[...slug]": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/next/router/next/router"
/******/ 			],
/******/ 			"__federation_expose_pages__checkout__[pid]": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/next/router/next/router"
/******/ 			],
/******/ 			"__federation_expose_pages__checkout__exposed_pages": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime"
/******/ 			],
/******/ 			"__federation_expose_pages__checkout__index": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/next/head/next/head?2efa"
/******/ 			],
/******/ 			"__federation_expose_pages__checkout__test_check_button": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/@ant-design/cssinjs/@ant-design/cssinjs",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/lib/components/Context/@ant-design/icons/lib/components/Context",
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?f464",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons/LoadingOutlined/@ant-design/icons/LoadingOutlined"
/******/ 			],
/******/ 			"__federation_expose_pages__checkout__test_title": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-f7a1680": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/lib/asn/LoadingOutlined/@ant-design/icons-svg/lib/asn/LoadingOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-1dea550": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/BarsOutlined/@ant-design/icons-svg/es/asn/BarsOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-83d4660": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/EllipsisOutlined/@ant-design/icons-svg/es/asn/EllipsisOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-b8eb240": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/LeftOutlined/@ant-design/icons-svg/es/asn/LeftOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-2496550": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/RightOutlined/@ant-design/icons-svg/es/asn/RightOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa90": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?1fa9"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa91": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?1fa9"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa92": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?1fa9"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa93": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?1fa9"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa94": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?1fa9"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime-_1fa95": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime?1fa9"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-f7a1681": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/lib/asn/LoadingOutlined/@ant-design/icons-svg/lib/asn/LoadingOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-1dea551": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/BarsOutlined/@ant-design/icons-svg/es/asn/BarsOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-b8eb241": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/LeftOutlined/@ant-design/icons-svg/es/asn/LeftOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-2496551": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/RightOutlined/@ant-design/icons-svg/es/asn/RightOutlined"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_ant-design_colors_ant-design_colors-webpack_sharing_consume_d-83d4661": [
/******/ 				"webpack/sharing/consume/default/@ant-design/colors/@ant-design/colors?220b",
/******/ 				"webpack/sharing/consume/default/@ant-design/icons-svg/es/asn/EllipsisOutlined/@ant-design/icons-svg/es/asn/EllipsisOutlined"
/******/ 			]
/******/ 		};
/******/ 		__webpack_require__.f.consumes = (chunkId, promises) => {
/******/ 			__webpack_require__.federation.bundlerRuntime.consumes({
/******/ 			chunkMapping: chunkMapping,
/******/ 			installedModules: installedModules,
/******/ 			chunkId: chunkId,
/******/ 			moduleToHandlerMapping: moduleToHandlerMapping,
/******/ 			promises: promises,
/******/ 			webpackRequire:__webpack_require__
/******/ 			});
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/embed/federation */
/******/ 	(() => {
/******/ 		var runtimeFactoriesArray = [];
/******/ 		var runtimeFactories = runtimeFactoriesArray.reduce((acc, id) => {
/******/ 			acc[id] = __webpack_require__.m[id];
/******/ 			return acc;
/******/ 		}, {});
/******/ 		globalThis.federationRuntimeModuleFactories = runtimeFactories;
/******/ 		
/******/ 		
/******/ 		var federation = __webpack_require__(/*! ../../packages/webpack-bundler-runtime/dist/index.esm.js */ "../../packages/webpack-bundler-runtime/dist/index.esm.js");
/******/ 		federation = federation["default"]
/******/ 		
/******/ 		
/******/ 		var prevFederation = __webpack_require__.federation;
/******/ 		__webpack_require__.federation = {};
/******/ 		for (var key in federation) {
/******/ 			__webpack_require__.federation[key] = federation[key];
/******/ 		}
/******/ 		for (var key in prevFederation) {
/******/ 			__webpack_require__.federation[key] = prevFederation[key];
/******/ 		}
/******/ 		federation = undefined;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/readFile chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "0" means "already loaded", Promise means loading
/******/ 		var installedChunks = {
/******/ 			"checkout": 0
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++) {
/******/ 				if(installedChunks[chunkIds[i]]) {
/******/ 					installedChunks[chunkIds[i]][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 		
/******/ 		};
/******/ 		
/******/ 		// ReadFile + VM.run chunk loading for javascript
/******/ 		__webpack_require__.f.readFileVm = function(chunkId, promises) {
/******/ 		
/******/ 			var installedChunkData = installedChunks[chunkId];
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 				// array of [resolve, reject, promise] means "currently loading"
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[2]);
/******/ 				} else {
/******/ 					if(!/^(webpack_sharing_consume_default_(ant\-design_colors_ant\-design_colors\-webpack_sharing_consume_d\-(1dea55[01]|249655[01]|83d466[01]|b8eb24[01]|f7a168[01])|react_jsx\-runtime_react_jsx\-runtime\-_1fa9[012345])|__federation_expose_next__router)$/.test(chunkId)) {
/******/ 						// load the chunk and return promise to it
/******/ 						var promise = new Promise(function(resolve, reject) {
/******/ 							installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 							var filename = require('path').join(__dirname, "" + __webpack_require__.u(chunkId));
/******/ 							require('fs').readFile(filename, 'utf-8', function(err, content) {
/******/ 								if(err) return reject(err);
/******/ 								var chunk = {};
/******/ 								require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\n})', filename)(chunk, require, require('path').dirname(filename), filename);
/******/ 								installChunk(chunk);
/******/ 							});
/******/ 						});
/******/ 						promises.push(installedChunkData[2] = promise);
/******/ 					} else installedChunks[chunkId] = 0;
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/inverted container startup */
/******/ 	(() => {
/******/ 		var innerRemote;
/******/ 		function attachRemote (resolve) {
/******/ 			if(__webpack_require__.m["webpack/container/entry/checkout"]) {
/******/ 				innerRemote = __webpack_require__("webpack/container/entry/checkout");
/******/ 			}
/******/ 			var gs = __webpack_require__.g || globalThis
/******/ 			gs["checkout"] = innerRemote
/******/ 			if(resolve) resolve(innerRemote);
/******/ 			return innerRemote;
/******/ 		};
/******/ 		attachRemote();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__("webpack/container/entry/checkout");
/******/ 	module.exports.checkout = __webpack_exports__;
/******/ 	
/******/ })()
;